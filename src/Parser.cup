import java_cup.runtime.*;
   
parser code {:
    boolean syntaxErrors = true;
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public void syntax_error(Symbol current_token) {
        report_error("Syntax error at line " + (current_token.left+1) + ", column "+ current_token.right, null);
    }

:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal TK_LPAREN, TK_RPAREN, TK_LBRACKET, TK_RBRACKET, TK_LBRACE, TK_RBRACE;
terminal TK_MINUS, TK_PLUS, TK_TIMES, TK_DIVIDE, TK_POWER, TK_DOT;
terminal TK_EQUALS, TK_IMPLICATION, TK_NOTEQUALS, TK_SMALLER, TK_LARGER, TK_ASSIGNMENT, TK_SEQUALS, TK_NOT, TK_AND, TK_OR;
terminal TK_INT, TK_FLOAT, TK_RAT, TK_BOOL, TK_DICTIONARY, TK_SEQUENCE, TK_CHAR;
terminal TK_IN, TK_LEN, TK_FDEF, TK_TDEF, TK_MAIN, TK_TOP;
terminal TK_SEMI, TK_COMMA, TK_COLON, TK_COLON_COLON;
terminal TK_ALIAS, TK_RETURN, TK_READ, TK_PRINT, TK_IF, TK_FI, TK_THEN, TK_ELSE, TK_WHILE, TK_HALF_DECLARATION;
terminal TK_DO, TK_OD, TK_FORALL, UMINUS;
terminal Integer   TK_INTEGER_CONSTANT;
terminal Boolean   TK_BOOLEAN_CONSTANT;
terminal Float     TK_FLOAT_CONSTANT;
terminal String    TK_RATIONAL_CONSTANT, TK_CHAR_CONSTANT;
terminal String    TK_IDENTIFIER, TK_STRING_CONSTANT;
   
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
non terminal            program, program_declaration_list, declaration_list_opt, declaration, main_function, alias_declaration;
non terminal            type, primitive_type, aggregate_type, sequence_type, dictionary_type;
non terminal            type_definition, type_definition_body, nonempty_declaration_list, nonassign_declaration;
non terminal            function_definition, type_opt, body, declaration_list, statements_list_opt, variable_declaration;
non terminal            body_declaration, body_declaration_list_opt, rhs_assignment_opt, variable_declaration_list;
non terminal            statement, statements_list, return_statement, read_statement, print_statement, funcion_call;
non terminal if_statement, else_statement_opt, else_statement, while_loop, forall_loop, iterable, assingment, rhs_assignment, assignment;
non terminal sequence_constant,  len_expression, index, value_index, value_substring, substring;
non terminal function_call, expression, expressions_list, expressions_list_opt, unknown_value, function_call_expression;
non terminal dictionary_constant, dictionary_list, dictionary_list_opt, dictionary_list_entry;

/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of unon terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like this where the
  lower line always will have higher precedence than the line before it.
   
  precedence left PLUS, MINUS; 
  precedence left TIMES, DIVIDE; 
*/

precedence left TK_AND, TK_OR, TK_IMPLICATION;
precedence left TK_EQUALS, TK_SEQUALS, TK_NOTEQUALS, TK_SMALLER;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_IN, TK_COLON_COLON;
precedence left TK_TIMES, TK_DIVIDE;
precedence left TK_POWER;
precedence left TK_NOT, UMINUS;
precedence left TK_LPAREN, TK_RPAREN;


/* ----------------------------Grammar Section-------------------- */
    program::= declaration_list_opt main_function declaration_list_opt
    {: System.out.println("parsing successful");:};
    declaration_list_opt ::=
                    | program_declaration_list
                    ;
    program_declaration_list ::= 
                    declaration
                    | declaration  program_declaration_list
                    ;

    declaration ::=
                    function_definition
                    | type_definition
                    | variable_declaration
                    | alias_declaration
                    ;
    alias_declaration ::= TK_ALIAS type TK_IDENTIFIER TK_SEMI;
                    
    main_function           ::= TK_MAIN TK_LBRACE body TK_RBRACE;
    // Type System
    //
    type           ::= 
                    primitive_type
                    | aggregate_type
                    | TK_IDENTIFIER
                    ;
    primitive_type ::= 
                    TK_BOOL
                    | TK_RAT
                    | TK_INT
                    | TK_FLOAT_CONSTANT
                    | TK_CHAR
                    ;
    aggregate_type  ::= sequence_type | dictionary_type;
    sequence_type   ::= 
                    TK_SEQUENCE TK_SMALLER type TK_LARGER
                    | TK_SEQUENCE TK_SMALLER TK_TOP TK_LARGER;
    dictionary_type ::= 
                    TK_DICTIONARY TK_SMALLER type TK_COMMA type TK_LARGER
                    | TK_DICTIONARY TK_SMALLER type TK_COMMA TK_TOP TK_LARGER;
   
// User Defined types // 
    type_definition           ::= TK_TDEF TK_IDENTIFIER TK_LBRACE nonempty_declaration_list TK_RBRACE TK_SEMI;
    nonempty_declaration_list ::= 
                    nonassign_declaration
                    | nonassign_declaration TK_COMMA declaration_list
                    ;                
    nonassign_declaration     ::= TK_HALF_DECLARATION type;


    // Functions
    //
    function_definition           ::= 
                    TK_FDEF TK_IDENTIFIER TK_LPAREN declaration_list TK_RPAREN TK_LBRACE body TK_RBRACE type_opt TK_SEMI;
    declaration_list              ::=
                    | nonempty_declaration_list
                    ;
    type_opt                      ::=
                    | TK_COLON type
                    ;
    body                          ::=
                    body_declaration_list_opt statements_list_opt
                    ;

    
    // Variable Declaration
    //
    body_declaration_list_opt ::=
                    | body_declaration body_declaration_list_opt
                    ;
    body_declaration          ::=
                    variable_declaration
                    | alias_declaration
                    | type_definition
                    ;
    variable_declaration          ::= TK_HALF_DECLARATION type rhs_assignment_opt TK_SEMI;
    rhs_assignment_opt            ::=
                    | rhs_assignment
                    ;
    statements_list_opt           ::=
                    | statements_list
                    ;
    

    // Statements
    //
    statements_list    ::= statement | statement statements_list;
    statement          ::= 
                    assignment
                    | read_statement
                    | print_statement
                    | function_call
                    | if_statement
                    | while_loop
                    | forall_loop
                    | return_statement
                    ;
    return_statement   ::= 
                    TK_RETURN expression TK_SEMI
                    | TK_RETURN TK_SEMI;
    read_statement     ::= TK_READ TK_IDENTIFIER TK_SEMI;
    print_statement    ::= TK_PRINT expression TK_SEMI;
    function_call      ::= function_call_expression TK_SEMI;
    function_call_expression  ::= TK_IDENTIFIER TK_LPAREN expressions_list_opt TK_RPAREN;
    expressions_list_opt ::= 
                    | expressions_list
                    ;
    expressions_list   ::=
                    expression
                    | expression TK_COMMA expressions_list
                    ;
                        
    if_statement       ::= TK_IF TK_LPAREN expression TK_RPAREN TK_THEN body else_statement_opt TK_FI;
    else_statement_opt ::=
                    | else_statement
                    ;
    else_statement     ::= TK_ELSE body;
    while_loop         ::= TK_WHILE TK_LPAREN expression TK_RPAREN TK_DO body TK_OD;
    forall_loop        ::= TK_FORALL TK_LPAREN TK_IDENTIFIER TK_IN iterable TK_LPAREN TK_DO body TK_OD;
    iterable           ::=
                    unknown_value
                    | dictionary_constant
                    | sequence_constant
                    ;
    // can assign value to an index, cant assign value to an index of a array returned by function
    assignment         ::= 
                    TK_IDENTIFIER rhs_assignment TK_SEMI
                    | TK_IDENTIFIER index rhs_assignment TK_SEMI
                    ;

    rhs_assignment     ::= TK_ASSIGNMENT expressions_list;


    // Expressions
    //
    expression         ::=
                    unknown_value
                    | expression TK_AND expression
                    | expression TK_OR expression
                    | TK_NOT expression
                    | TK_MINUS expression %prec UMINUS
                    | expression TK_PLUS expression
                    | expression TK_MINUS expression
                    | expression TK_POWER expression
                    | expression TK_DIVIDE expression
                    | expression TK_TIMES expression
                    | expression TK_SMALLER expression
                    | expression TK_SEQUALS expression
                    | expression TK_EQUALS expression
                    | expression TK_NOTEQUALS expression
                    | expression TK_IMPLICATION expression
                    | expression TK_COLON_COLON expression
                    | TK_INTEGER_CONSTANT
                    | TK_FLOAT_CONSTANT
                    | TK_BOOLEAN_CONSTANT
                    | TK_STRING_CONSTANT
                    | TK_CHAR_CONSTANT
                    | TK_RATIONAL_CONSTANT
                    | sequence_constant
                    | dictionary_constant
                    | TK_LPAREN expression TK_RPAREN
                    | len_expression
                    | expression TK_IN expression
                    ;

    unknown_value      ::=
                    function_call_expression
                    | TK_IDENTIFIER
                    | value_index
                    | value_substring
                    | TK_IDENTIFIER TK_DOT TK_IDENTIFIER
                    | function_call_expression TK_DOT TK_IDENTIFIER
                    ; 
    sequence_constant  ::= TK_LBRACKET expressions_list_opt TK_RBRACKET;
    len_expression     ::= TK_LEN TK_LPAREN expression TK_RPAREN;
    index              ::= TK_LBRACKET expression TK_RBRACKET;
    value_index        ::= 
                    TK_IDENTIFIER index
                    | function_call_expression index
                    | TK_LPAREN expression TK_RPAREN index
                    ;
    substring          ::=
                    TK_LBRACKET expression TK_COLON expression TK_RBRACKET
                    | TK_LBRACKET expression TK_COLON TK_RBRACKET
                    | TK_LBRACKET TK_COLON expression TK_RBRACKET
                    ;
    value_substring    ::= 
                    TK_IDENTIFIER substring
                    | function_call_expression substring
                    | TK_LPAREN expression TK_RPAREN substring
                    ;
    dictionary_constant ::= TK_LBRACE dictionary_list_opt TK_RBRACE;
    dictionary_list_opt ::=
                | dictionary_list;
    dictionary_list     ::=
                dictionary_list_entry
                | dictionary_list_entry TK_COMMA dictionary_list
                ;
    dictionary_list_entry ::=
                expression TK_COLON expression
                | TK_HALF_DECLARATION expression
                ;

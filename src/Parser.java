
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\005\000\002\002\004\000\002\004" +
    "\002\000\002\004\003\000\002\003\003\000\002\003\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\006\000\002\013\007\000" +
    "\002\014\010\000\002\016\003\000\002\016\005\000\002" +
    "\017\004\000\002\020\014\000\002\023\002\000\002\023" +
    "\003\000\002\021\002\000\002\021\003\000\002\022\004" +
    "\000\002\026\002\000\002\026\004\000\002\025\006\000" +
    "\002\027\002\000\002\027\003\000\002\024\002\000\002" +
    "\024\003\000\002\032\003\000\002\032\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\033\005\000\002\033\004\000\002" +
    "\034\005\000\002\035\005\000\002\050\004\000\002\057" +
    "\006\000\002\053\002\000\002\053\003\000\002\052\003" +
    "\000\002\052\005\000\002\037\012\000\002\040\002\000" +
    "\002\040\003\000\002\041\004\000\002\042\011\000\002" +
    "\043\013\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\047\005\000\002\046\004\000\002\051\003" +
    "\000\002\051\005\000\002\051\005\000\002\051\004\000" +
    "\002\051\004\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\005\000\002\054\003\000\002" +
    "\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\012\042\011\043\004\044\uffff\061\006\001" +
    "\002\000\004\070\247\001\002\000\014\002\ufffd\042\011" +
    "\043\004\044\ufffd\061\006\001\002\000\022\031\217\032" +
    "\223\033\210\034\212\035\214\036\213\037\211\070\216" +
    "\001\002\000\014\002\ufffb\042\ufffb\043\ufffb\044\ufffb\061" +
    "\ufffb\001\002\000\004\002\241\001\002\000\004\070\176" +
    "\001\002\000\004\044\017\001\002\000\006\002\ufffe\044" +
    "\ufffe\001\002\000\014\002\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\061\ufff9\001\002\000\014\002\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\061\ufffa\001\002\000\012\002\uffff\042\011\043\004" +
    "\061\006\001\002\000\004\010\020\001\002\000\024\011" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\060\uffe1\061\006" +
    "\064\uffe1\070\uffe1\001\002\000\004\011\174\001\002\000" +
    "\030\011\uffdc\051\026\052\036\053\044\054\045\055\uffdc" +
    "\057\uffdc\060\037\063\uffdc\064\033\070\040\001\002\000" +
    "\032\011\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\057\uffe1\060\uffe1\061\006\063\uffe1\064\uffe1\070\uffe1\001" +
    "\002\000\030\011\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\057\uffe0\060\uffe0\063\uffe0\064\uffe0\070\uffe0\001" +
    "\002\000\004\045\173\001\002\000\022\004\052\012\061" +
    "\026\054\045\170\066\062\067\051\070\057\071\053\001" +
    "\002\000\030\011\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\057\uffd3\060\uffd3\063\uffd3\064\uffd3\070\uffd3\001" +
    "\002\000\030\011\uffda\051\026\052\036\053\044\054\045" +
    "\055\uffda\057\uffda\060\037\063\uffda\064\033\070\040\001" +
    "\002\000\030\011\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\057\uffd4\060\uffd4\063\uffd4\064\uffd4\070\uffd4\001" +
    "\002\000\012\011\uffdb\055\uffdb\057\uffdb\063\uffdb\001\002" +
    "\000\004\004\154\001\002\000\012\011\uffe2\055\uffe2\057" +
    "\uffe2\063\uffe2\001\002\000\030\011\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\063\uffd5\064" +
    "\uffd5\070\uffd5\001\002\000\004\070\152\001\002\000\004" +
    "\004\144\001\002\000\006\004\124\024\141\001\002\000" +
    "\030\011\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\057\uffd2\060\uffd2\063\uffd2\064\uffd2\070\uffd2\001\002\000" +
    "\030\011\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\057\uffd7\060\uffd7\063\uffd7\064\uffd7\070\uffd7\001\002\000" +
    "\030\011\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\057\uffd8\060\uffd8\063\uffd8\064\uffd8\070\uffd8\001\002\000" +
    "\020\004\052\012\061\026\054\066\062\067\051\070\057" +
    "\071\053\001\002\000\004\004\050\001\002\000\030\011" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1" +
    "\060\uffd1\063\uffd1\064\uffd1\070\uffd1\001\002\000\030\011" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6" +
    "\060\uffd6\063\uffd6\064\uffd6\070\uffd6\001\002\000\020\004" +
    "\052\012\061\026\054\066\062\067\051\070\057\071\053" +
    "\001\002\000\040\005\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\025\uffab" +
    "\027\uffab\030\uffab\045\uffab\046\uffab\001\002\000\020\004" +
    "\052\012\061\026\054\066\062\067\051\070\057\071\053" +
    "\001\002\000\040\005\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\045\uffaa\046\uffaa\001\002\000\020\004" +
    "\052\012\061\026\054\066\062\067\051\070\057\071\053" +
    "\001\002\000\042\004\uffa8\005\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\025\uffa8\027\uffa8\030\uffa8\045\uffa8\046\uffa8\001\002\000" +
    "\040\005\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\025\uffbb\027\uffbb\030" +
    "\uffbb\045\uffbb\046\uffbb\001\002\000\042\004\124\005\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\025\uffa7\027\uffa7\030\uffa7\045\uffa7" +
    "\046\uffa7\001\002\000\034\005\114\012\074\013\070\014" +
    "\065\015\071\016\066\017\064\020\073\021\075\022\077" +
    "\025\076\027\067\030\072\001\002\000\020\004\052\012" +
    "\061\026\054\066\062\067\051\070\057\071\053\001\002" +
    "\000\040\005\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\025\uffac\027\uffac" +
    "\030\uffac\045\uffac\046\uffac\001\002\000\040\005\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\025\uffb7\027\uffb7\030\uffb7\045\uffb7\046" +
    "\uffb7\001\002\000\020\004\052\012\061\026\054\066\062" +
    "\067\051\070\057\071\053\001\002\000\020\004\052\012" +
    "\061\026\054\066\062\067\051\070\057\071\053\001\002" +
    "\000\020\004\052\012\061\026\054\066\062\067\051\070" +
    "\057\071\053\001\002\000\020\004\052\012\061\026\054" +
    "\066\062\067\051\070\057\071\053\001\002\000\020\004" +
    "\052\012\061\026\054\066\062\067\051\070\057\071\053" +
    "\001\002\000\020\004\052\012\061\026\054\066\062\067" +
    "\051\070\057\071\053\001\002\000\020\004\052\012\061" +
    "\026\054\066\062\067\051\070\057\071\053\001\002\000" +
    "\020\004\052\012\061\026\054\066\062\067\051\070\057" +
    "\071\053\001\002\000\020\004\052\012\061\026\054\066" +
    "\062\067\051\070\057\071\053\001\002\000\020\004\052" +
    "\012\061\026\054\066\062\067\051\070\057\071\053\001" +
    "\002\000\020\004\052\012\061\026\054\066\062\067\051" +
    "\070\057\071\053\001\002\000\020\004\052\012\061\026" +
    "\054\066\062\067\051\070\057\071\053\001\002\000\040" +
    "\005\uffb1\012\074\013\070\014\065\015\071\016\066\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\025\uffb1\027\uffb1\030\uffb1" +
    "\045\uffb1\046\uffb1\001\002\000\040\005\uffb0\012\074\013" +
    "\070\014\065\015\071\016\066\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\025\uffb0\027\uffb0\030\uffb0\045\uffb0\046\uffb0\001" +
    "\002\000\040\005\uffae\012\074\013\070\014\065\015\071" +
    "\016\066\017\uffae\020\uffae\021\uffae\022\uffae\025\uffae\027" +
    "\uffae\030\uffae\045\uffae\046\uffae\001\002\000\040\005\uffb5" +
    "\012\uffb5\013\uffb5\014\065\015\071\016\066\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\025\uffb5\027\uffb5\030\uffb5\045\uffb5" +
    "\046\uffb5\001\002\000\040\005\uffad\012\074\013\070\014" +
    "\065\015\071\016\066\017\064\020\uffad\021\075\022\077" +
    "\025\076\027\uffad\030\uffad\045\uffad\046\uffad\001\002\000" +
    "\040\005\uffb9\012\074\013\070\014\065\015\071\016\066" +
    "\017\064\020\uffb9\021\075\022\077\025\076\027\uffb9\030" +
    "\uffb9\045\uffb9\046\uffb9\001\002\000\040\005\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\066\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\025\uffb3\027\uffb3\030\uffb3\045\uffb3\046\uffb3" +
    "\001\002\000\040\005\uffb6\012\uffb6\013\uffb6\014\065\015" +
    "\071\016\066\017\uffb6\020\uffb6\021\uffb6\022\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\045\uffb6\046\uffb6\001\002\000\040\005" +
    "\uffba\012\074\013\070\014\065\015\071\016\066\017\064" +
    "\020\uffba\021\075\022\077\025\076\027\uffba\030\uffba\045" +
    "\uffba\046\uffba\001\002\000\040\005\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\025\uffb4\027\uffb4\030\uffb4\045\uffb4\046\uffb4\001\002" +
    "\000\040\005\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\066\017\uffb2\020\uffb2\021\uffb2\022\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\045\uffb2\046\uffb2\001\002\000\040\005\uffaf\012" +
    "\074\013\070\014\065\015\071\016\066\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\025\uffaf\027\uffaf\030\uffaf\045\uffaf\046" +
    "\uffaf\001\002\000\004\056\115\001\002\000\026\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061" +
    "\006\064\uffe1\070\uffe1\001\002\000\006\055\uffc5\057\121" +
    "\001\002\000\004\055\123\001\002\000\004\055\uffc4\001" +
    "\002\000\024\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\060\uffe1\061\006\064\uffe1\070\uffe1\001\002\000\004\055" +
    "\uffc3\001\002\000\030\011\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6\070" +
    "\uffc6\001\002\000\022\004\052\005\uffca\012\061\026\054" +
    "\066\062\067\051\070\057\071\053\001\002\000\004\005" +
    "\uffc9\001\002\000\040\005\uffc8\012\074\013\070\014\065" +
    "\015\071\016\066\017\064\020\073\021\075\022\077\025" +
    "\076\027\067\030\072\045\uffc8\046\131\001\002\000\004" +
    "\005\130\001\002\000\042\004\uffcb\005\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\025\uffcb\027\uffcb\030\uffcb\045\uffcb\046\uffcb\001" +
    "\002\000\020\004\052\012\061\026\054\066\062\067\051" +
    "\070\057\071\053\001\002\000\006\005\uffc7\045\uffc7\001" +
    "\002\000\040\005\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\025\uffb8\027" +
    "\uffb8\030\uffb8\045\uffb8\046\uffb8\001\002\000\034\005\135" +
    "\012\074\013\070\014\065\015\071\016\066\017\064\020" +
    "\073\021\075\022\077\025\076\027\067\030\072\001\002" +
    "\000\040\005\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\025\uffa9\027\uffa9" +
    "\030\uffa9\045\uffa9\046\uffa9\001\002\000\034\012\074\013" +
    "\070\014\065\015\071\016\066\017\064\020\073\021\075" +
    "\022\077\025\076\027\067\030\072\045\137\001\002\000" +
    "\030\011\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\057\uffcd\060\uffcd\063\uffcd\064\uffcd\070\uffcd\001\002\000" +
    "\004\045\143\001\002\000\020\004\052\012\061\026\054" +
    "\066\062\067\051\070\057\071\053\001\002\000\004\045" +
    "\uffbc\001\002\000\030\011\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\057\uffbd\060\uffbd\063\uffbd\064\uffbd\070" +
    "\uffbd\001\002\000\020\004\052\012\061\026\054\066\062" +
    "\067\051\070\057\071\053\001\002\000\034\005\146\012" +
    "\074\013\070\014\065\015\071\016\066\017\064\020\073" +
    "\021\075\022\077\025\076\027\067\030\072\001\002\000" +
    "\004\062\147\001\002\000\024\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\060\uffe1\061\006\063\uffe1\064\uffe1\070\uffe1\001" +
    "\002\000\004\063\151\001\002\000\030\011\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\063" +
    "\uffc2\064\uffc2\070\uffc2\001\002\000\004\045\153\001\002" +
    "\000\030\011\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\057\uffce\060\uffce\063\uffce\064\uffce\070\uffce\001\002" +
    "\000\004\070\155\001\002\000\004\040\156\001\002\000" +
    "\004\070\057\001\002\000\004\004\uffbe\001\002\000\004" +
    "\004\uffbf\001\002\000\004\004\163\001\002\000\004\004" +
    "\uffc0\001\002\000\004\062\164\001\002\000\024\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\060\uffe1\061\006\063\uffe1\064" +
    "\uffe1\070\uffe1\001\002\000\004\063\166\001\002\000\030" +
    "\011\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\060\uffc1\063\uffc1\064\uffc1\070\uffc1\001\002\000\012" +
    "\011\uffd9\055\uffd9\057\uffd9\063\uffd9\001\002\000\030\011" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\063\uffcf\064\uffcf\070\uffcf\001\002\000\034\012" +
    "\074\013\070\014\065\015\071\016\066\017\064\020\073" +
    "\021\075\022\077\025\076\027\067\030\072\045\172\001" +
    "\002\000\030\011\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\057\uffd0\060\uffd0\063\uffd0\064\uffd0\070\uffd0\001" +
    "\002\000\030\011\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\057\uffcc\060\uffcc\063\uffcc\064\uffcc\070\uffcc\001" +
    "\002\000\012\002\ufff8\042\ufff8\043\ufff8\061\ufff8\001\002" +
    "\000\004\002\001\001\002\000\004\004\177\001\002\000" +
    "\006\005\uffe6\061\200\001\002\000\022\031\217\032\223" +
    "\033\210\034\212\035\214\036\213\037\211\070\216\001" +
    "\002\000\006\005\uffe5\011\uffe5\001\002\000\010\005\uffea" +
    "\011\uffea\046\236\001\002\000\004\005\204\001\002\000" +
    "\004\010\205\001\002\000\024\011\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\060\uffe1\061\006\064\uffe1\070\uffe1\001" +
    "\002\000\004\011\207\001\002\000\024\031\217\032\223" +
    "\033\210\034\212\035\214\036\213\037\211\045\uffe4\070" +
    "\216\001\002\000\016\005\ufff3\011\ufff3\023\ufff3\024\ufff3" +
    "\045\ufff3\046\ufff3\001\002\000\016\005\ufff0\011\ufff0\023" +
    "\ufff0\024\ufff0\045\ufff0\046\ufff0\001\002\000\016\005\ufff4" +
    "\011\ufff4\023\ufff4\024\ufff4\045\ufff4\046\ufff4\001\002\000" +
    "\004\022\233\001\002\000\004\022\227\001\002\000\016" +
    "\005\uffee\011\uffee\023\uffee\024\uffee\045\uffee\046\uffee\001" +
    "\002\000\016\005\ufff5\011\ufff5\023\ufff5\024\ufff5\045\ufff5" +
    "\046\ufff5\001\002\000\016\005\ufff2\011\ufff2\023\ufff2\024" +
    "\ufff2\045\ufff2\046\ufff2\001\002\000\016\005\ufff7\011\ufff7" +
    "\023\ufff7\024\ufff7\045\ufff7\046\ufff7\001\002\000\004\045" +
    "\226\001\002\000\004\045\uffe3\001\002\000\016\005\ufff1" +
    "\011\ufff1\023\ufff1\024\ufff1\045\ufff1\046\ufff1\001\002\000" +
    "\016\005\uffef\011\uffef\023\uffef\024\uffef\045\uffef\046\uffef" +
    "\001\002\000\016\005\ufff6\011\ufff6\023\ufff6\024\ufff6\045" +
    "\ufff6\046\ufff6\001\002\000\014\002\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\061\uffe7\001\002\000\022\031\217\032\223\033" +
    "\210\034\212\035\214\036\213\037\211\070\216\001\002" +
    "\000\004\046\231\001\002\000\022\031\217\032\223\033" +
    "\210\034\212\035\214\036\213\037\211\070\216\001\002" +
    "\000\016\005\uffec\011\uffec\023\uffec\024\uffec\045\uffec\046" +
    "\uffec\001\002\000\022\031\217\032\223\033\210\034\212" +
    "\035\214\036\213\037\211\070\216\001\002\000\004\023" +
    "\235\001\002\000\016\005\uffed\011\uffed\023\uffed\024\uffed" +
    "\045\uffed\046\uffed\001\002\000\010\005\uffe6\011\uffe6\061" +
    "\200\001\002\000\006\005\uffe9\011\uffe9\001\002\000\010" +
    "\005\uffe8\011\uffe8\046\uffe8\001\002\000\004\002\000\001" +
    "\002\000\006\024\141\045\uffde\001\002\000\004\045\245" +
    "\001\002\000\004\045\uffdd\001\002\000\042\002\uffdf\011" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf\063\uffdf\064" +
    "\uffdf\070\uffdf\001\002\000\006\002\ufffc\044\ufffc\001\002" +
    "\000\004\010\250\001\002\000\004\061\200\001\002\000" +
    "\004\011\252\001\002\000\004\045\253\001\002\000\014" +
    "\002\uffeb\042\uffeb\043\uffeb\044\uffeb\061\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\020\002\007\003\012\004\011\005\004\014" +
    "\014\020\006\025\013\001\001\000\002\001\001\000\014" +
    "\003\245\005\004\014\014\020\006\025\013\001\001\000" +
    "\014\007\241\010\217\011\224\012\223\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\012\004\174\005\004\014" +
    "\014\020\006\025\013\001\001\000\002\001\001\000\010" +
    "\022\020\025\022\026\021\001\001\000\002\001\001\000" +
    "\032\024\033\031\027\032\031\033\045\034\041\035\046" +
    "\037\030\042\026\043\040\047\042\050\034\057\024\001" +
    "\001\000\006\025\022\026\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\051\170\054\055\057\054\001" +
    "\001\000\002\001\001\000\030\031\027\032\166\033\045" +
    "\034\041\035\046\037\030\042\026\043\040\047\042\050" +
    "\034\057\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\135\054\055\057\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\057\054" +
    "\055\057\054\001\001\000\002\001\001\000\010\051\133" +
    "\054\055\057\054\001\001\000\002\001\001\000\010\051" +
    "\132\054\055\057\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\051" +
    "\062\054\055\057\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\112\054\055\057\054\001\001\000" +
    "\010\051\111\054\055\057\054\001\001\000\010\051\110" +
    "\054\055\057\054\001\001\000\010\051\107\054\055\057" +
    "\054\001\001\000\010\051\106\054\055\057\054\001\001" +
    "\000\010\051\105\054\055\057\054\001\001\000\010\051" +
    "\104\054\055\057\054\001\001\000\010\051\103\054\055" +
    "\057\054\001\001\000\010\051\102\054\055\057\054\001" +
    "\001\000\010\051\101\054\055\057\054\001\001\000\010" +
    "\051\100\054\055\057\054\001\001\000\010\051\077\054" +
    "\055\057\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\115\025\022\026\021" +
    "\001\001\000\006\040\116\041\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\121\025\022\026\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\051" +
    "\125\052\124\053\126\054\055\057\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\051\125\052\131\054\055\057\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\051\125\052\141\054\055\057\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\051\144" +
    "\054\055\057\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\147\025\022\026\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\044\160" +
    "\054\161\055\157\056\156\057\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\164\025\022\026\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\200\017\201\023\202\001\001\000" +
    "\014\007\237\010\217\011\224\012\223\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\205\025\022\026\021\001\001" +
    "\000\002\001\001\000\016\007\221\010\217\011\224\012" +
    "\223\013\214\021\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\227\010\217\011\224\012\223\013" +
    "\214\001\001\000\002\001\001\000\014\007\231\010\217" +
    "\011\224\012\223\013\214\001\001\000\002\001\001\000" +
    "\014\007\233\010\217\011\224\012\223\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\200\017" +
    "\201\023\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\242\046\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\250\017\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean syntaxErrors = true;
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public void syntax_error(Symbol current_token) {
        report_error("Syntax error at line " + (current_token.left+1) + ", column "+ current_token.right, null);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_list_opt main_function declaration_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list_opt ::= program_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_declaration_list ::= declaration program_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= function_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= type_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_function ::= TK_MAIN TK_LBRACE body TK_RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_function",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= aggregate_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // primitive_type ::= TK_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // primitive_type ::= TK_RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // primitive_type ::= TK_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // primitive_type ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primitive_type ::= TK_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aggregate_type ::= sequence_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aggregate_type ::= dictionary_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sequence_type ::= TK_SEQUENCE TK_SMALLER type TK_LARGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dictionary_type ::= TK_DICTIONARY TK_SMALLER type TK_COMMA type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_definition ::= TK_TDEF TK_IDENTIFIER TK_LBRACE nonempty_declaration_list TK_RBRACE TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nonempty_declaration_list ::= nonassign_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_declaration_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nonempty_declaration_list ::= nonassign_declaration TK_COMMA declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_declaration_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nonassign_declaration ::= TK_HALF_DECLARATION type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonassign_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_definition ::= TK_FDEF TK_IDENTIFIER TK_LPAREN declaration_list TK_RPAREN TK_LBRACE body TK_RBRACE type_opt TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_list ::= nonempty_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_opt ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // body ::= variable_declaration_list_opt statements_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_declaration_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list_opt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_declaration_list_opt ::= variable_declaration variable_declaration_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list_opt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_declaration ::= TK_HALF_DECLARATION type rhs_assignment_opt TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rhs_assignment_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rhs_assignment_opt ::= rhs_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements_list_opt ::= statements_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statements_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statements_list ::= statement statements_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= read_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= while_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= forall_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // return_statement ::= TK_RETURN expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_statement ::= TK_RETURN TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_statement ::= TK_READ TK_IDENTIFIER TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_statement ::= TK_PRINT expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= function_call_expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_call_expression ::= TK_IDENTIFIER TK_LPAREN expressions_list_opt TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_expression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressions_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list_opt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressions_list_opt ::= expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list_opt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressions_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressions_list ::= expression TK_COMMA expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_statement ::= TK_IF TK_LPAREN expression TK_RPAREN TK_THEN body else_statement_opt TK_FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_statement_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_opt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_statement_opt ::= else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_opt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_statement ::= TK_ELSE body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while_loop ::= TK_WHILE TK_LPAREN expression TK_RPAREN TK_DO body TK_OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forall_loop ::= TK_FORALL TK_LPAREN TK_IDENTIFIER TK_IN iterable TK_LPAREN TK_DO body TK_OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forall_loop",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iterable ::= unknown_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iterable ::= dictionary_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // iterable ::= sequence_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= TK_IDENTIFIER rhs_assignment TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rhs_assignment ::= TK_ASSIGNMENT expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= unknown_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression TK_AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression TK_OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= TK_NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= TK_MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression TK_PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression TK_MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression TK_POWER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression TK_DIVIDE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression TK_TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression TK_SMALLER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression TK_SEQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression TK_EQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression TK_NOTEQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression TK_IMPLICATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= TK_BOOLEAN_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= TK_STRING_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= TK_LPAREN expression TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unknown_value ::= function_call_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unknown_value ::= TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

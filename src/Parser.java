
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\005\000\002\002\004\000\002\004" +
    "\002\000\002\004\003\000\002\003\003\000\002\003\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\006\000\002\013\007\000" +
    "\002\014\010\000\002\016\003\000\002\016\005\000\002" +
    "\017\004\000\002\020\014\000\002\023\002\000\002\023" +
    "\003\000\002\021\002\000\002\021\003\000\002\022\004" +
    "\000\002\026\002\000\002\026\004\000\002\025\006\000" +
    "\002\027\002\000\002\027\003\000\002\024\002\000\002" +
    "\024\003\000\002\032\003\000\002\032\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\033\005\000\002\033\004\000\002" +
    "\034\005\000\002\035\005\000\002\057\004\000\002\064" +
    "\006\000\002\062\002\000\002\062\003\000\002\061\003" +
    "\000\002\061\005\000\002\037\012\000\002\040\002\000" +
    "\002\040\003\000\002\041\004\000\002\042\011\000\002" +
    "\043\013\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\047\005\000\002\047\006\000\002\046\004" +
    "\000\002\060\003\000\002\060\005\000\002\060\005\000" +
    "\002\060\004\000\002\060\004\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\005\000\002\060\003\000\002\060" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\050\005\000\002\052\006\000" +
    "\002\053\005\000\002\054\004\000\002\054\004\000\002" +
    "\054\006\000\002\056\007\000\002\056\006\000\002\056" +
    "\006\000\002\055\004\000\002\055\004\000\002\055\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\012\042\011\043\004\044\uffff\062\006\001" +
    "\002\000\004\071\316\001\002\000\014\002\ufffd\042\011" +
    "\043\004\044\ufffd\062\006\001\002\000\022\031\266\032" +
    "\272\033\257\034\261\035\263\036\262\037\260\071\265" +
    "\001\002\000\014\002\ufffb\042\ufffb\043\ufffb\044\ufffb\062" +
    "\ufffb\001\002\000\004\002\310\001\002\000\004\071\245" +
    "\001\002\000\004\044\017\001\002\000\006\002\ufffe\044" +
    "\ufffe\001\002\000\014\002\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\062\ufff9\001\002\000\014\002\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\062\ufffa\001\002\000\012\002\uffff\042\011\043\004" +
    "\062\006\001\002\000\004\010\020\001\002\000\024\011" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\061\uffe1\062\006" +
    "\065\uffe1\071\uffe1\001\002\000\004\011\243\001\002\000" +
    "\030\011\uffdc\052\026\053\036\054\044\055\045\056\uffdc" +
    "\060\uffdc\061\037\064\uffdc\065\033\071\040\001\002\000" +
    "\032\011\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\060\uffe1\061\uffe1\062\006\064\uffe1\065\uffe1\071\uffe1\001" +
    "\002\000\030\011\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\060\uffe0\061\uffe0\064\uffe0\065\uffe0\071\uffe0\001" +
    "\002\000\004\045\242\001\002\000\026\004\053\006\061" +
    "\012\065\026\055\041\063\045\237\067\070\070\051\071" +
    "\062\072\054\001\002\000\030\011\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061\uffd3\064\uffd3\065" +
    "\uffd3\071\uffd3\001\002\000\030\011\uffda\052\026\053\036" +
    "\054\044\055\045\056\uffda\060\uffda\061\037\064\uffda\065" +
    "\033\071\040\001\002\000\030\011\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\064\uffd4\065" +
    "\uffd4\071\uffd4\001\002\000\012\011\uffdb\056\uffdb\060\uffdb" +
    "\064\uffdb\001\002\000\004\004\220\001\002\000\012\011" +
    "\uffe2\056\uffe2\060\uffe2\064\uffe2\001\002\000\030\011\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5\061" +
    "\uffd5\064\uffd5\065\uffd5\071\uffd5\001\002\000\004\071\216" +
    "\001\002\000\004\004\210\001\002\000\010\004\141\006" +
    "\202\024\201\001\002\000\030\011\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\064\uffd2\065" +
    "\uffd2\071\uffd2\001\002\000\030\011\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7\064\uffd7\065" +
    "\uffd7\071\uffd7\001\002\000\030\011\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\060\uffd8\061\uffd8\064\uffd8\065" +
    "\uffd8\071\uffd8\001\002\000\024\004\053\006\061\012\065" +
    "\026\055\041\063\067\070\070\051\071\062\072\054\001" +
    "\002\000\004\004\050\001\002\000\030\011\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\064" +
    "\uffd1\065\uffd1\071\uffd1\001\002\000\030\011\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\064" +
    "\uffd6\065\uffd6\071\uffd6\001\002\000\024\004\053\006\061" +
    "\012\065\026\055\041\063\067\070\070\051\071\062\072" +
    "\054\001\002\000\050\005\uffa9\007\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\025\uffa9\027\uffa9\030\uffa9\040\uffa9\045\uffa9\046\uffa9" +
    "\047\uffa9\050\uffa9\001\002\000\052\004\uffa1\005\uffa1\007" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\025\uffa1\027\uffa1\030\uffa1\040" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\001\002\000\024" +
    "\004\053\006\061\012\065\026\055\041\063\067\070\070" +
    "\051\071\062\072\054\001\002\000\050\005\uffa8\007\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\025\uffa8\027\uffa8\030\uffa8\040\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\001\002\000\024\004" +
    "\053\006\061\012\065\026\055\041\063\067\070\070\051" +
    "\071\062\072\054\001\002\000\054\004\uffa3\005\uffa3\006" +
    "\144\007\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\025\uffa3\027\uffa3\030" +
    "\uffa3\040\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002" +
    "\000\050\005\uffba\007\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\025\uffba" +
    "\027\uffba\030\uffba\040\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\001\002\000\052\004\uffa0\005\uffa0\007\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\025\uffa0\027\uffa0\030\uffa0\040\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\001\002\000\026\004\053\006" +
    "\061\007\uffca\012\065\026\055\041\063\067\070\070\051" +
    "\071\062\072\054\001\002\000\054\004\141\005\uffa2\006" +
    "\144\007\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\025\uffa2\027\uffa2\030" +
    "\uffa2\040\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\001\002" +
    "\000\004\004\136\001\002\000\040\005\126\012\103\013" +
    "\100\014\075\015\077\016\074\017\073\020\102\021\104" +
    "\022\106\025\105\027\076\030\101\040\107\050\072\001" +
    "\002\000\024\004\053\006\061\012\065\026\055\041\063" +
    "\067\070\070\051\071\062\072\054\001\002\000\050\005" +
    "\uffa5\007\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\040\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\001\002" +
    "\000\050\005\uffa7\007\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\040\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\001\002\000\050\005\uffaa\007\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\025\uffaa\027\uffaa\030\uffaa\040\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\001\002\000\050\005\uffb6\007\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\025\uffb6\027\uffb6\030\uffb6\040\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\001\002\000\024\004\053" +
    "\006\061\012\065\026\055\041\063\067\070\070\051\071" +
    "\062\072\054\001\002\000\024\004\053\006\061\012\065" +
    "\026\055\041\063\067\070\070\051\071\062\072\054\001" +
    "\002\000\024\004\053\006\061\012\065\026\055\041\063" +
    "\067\070\070\051\071\062\072\054\001\002\000\024\004" +
    "\053\006\061\012\065\026\055\041\063\067\070\070\051" +
    "\071\062\072\054\001\002\000\024\004\053\006\061\012" +
    "\065\026\055\041\063\067\070\070\051\071\062\072\054" +
    "\001\002\000\024\004\053\006\061\012\065\026\055\041" +
    "\063\067\070\070\051\071\062\072\054\001\002\000\024" +
    "\004\053\006\061\012\065\026\055\041\063\067\070\070" +
    "\051\071\062\072\054\001\002\000\024\004\053\006\061" +
    "\012\065\026\055\041\063\067\070\070\051\071\062\072" +
    "\054\001\002\000\024\004\053\006\061\012\065\026\055" +
    "\041\063\067\070\070\051\071\062\072\054\001\002\000" +
    "\024\004\053\006\061\012\065\026\055\041\063\067\070" +
    "\070\051\071\062\072\054\001\002\000\024\004\053\006" +
    "\061\012\065\026\055\041\063\067\070\070\051\071\062" +
    "\072\054\001\002\000\024\004\053\006\061\012\065\026" +
    "\055\041\063\067\070\070\051\071\062\072\054\001\002" +
    "\000\024\004\053\006\061\012\065\026\055\041\063\067" +
    "\070\070\051\071\062\072\054\001\002\000\024\004\053" +
    "\006\061\012\065\026\055\041\063\067\070\070\051\071" +
    "\062\072\054\001\002\000\050\005\uffa4\007\uffa4\012\uffa4" +
    "\013\uffa4\014\075\015\077\016\074\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\025\uffa4\027\uffa4\030\uffa4\040\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\001\002\000\050\005\uffb0\007" +
    "\uffb0\012\103\013\100\014\075\015\077\016\074\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\025\uffb0\027\uffb0\030\uffb0\040" +
    "\107\045\uffb0\046\uffb0\047\uffb0\050\072\001\002\000\050" +
    "\005\uffaf\007\uffaf\012\103\013\100\014\075\015\077\016" +
    "\074\017\uffaf\020\uffaf\021\uffaf\022\uffaf\025\uffaf\027\uffaf" +
    "\030\uffaf\040\107\045\uffaf\046\uffaf\047\uffaf\050\072\001" +
    "\002\000\050\005\uffad\007\uffad\012\103\013\100\014\075" +
    "\015\077\016\074\017\uffad\020\uffad\021\uffad\022\uffad\025" +
    "\uffad\027\uffad\030\uffad\040\107\045\uffad\046\uffad\047\uffad" +
    "\050\072\001\002\000\050\005\uffb4\007\uffb4\012\uffb4\013" +
    "\uffb4\014\075\015\077\016\074\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\025\uffb4\027\uffb4\030\uffb4\040\107\045\uffb4\046" +
    "\uffb4\047\uffb4\050\072\001\002\000\050\005\uffac\007\uffac" +
    "\012\103\013\100\014\075\015\077\016\074\017\073\020" +
    "\uffac\021\104\022\106\025\105\027\uffac\030\uffac\040\107" +
    "\045\uffac\046\uffac\047\uffac\050\072\001\002\000\050\005" +
    "\uffb8\007\uffb8\012\103\013\100\014\075\015\077\016\074" +
    "\017\073\020\uffb8\021\104\022\106\025\105\027\uffb8\030" +
    "\uffb8\040\107\045\uffb8\046\uffb8\047\uffb8\050\072\001\002" +
    "\000\050\005\uffb5\007\uffb5\012\uffb5\013\uffb5\014\075\015" +
    "\077\016\074\017\uffb5\020\uffb5\021\uffb5\022\uffb5\025\uffb5" +
    "\027\uffb5\030\uffb5\040\107\045\uffb5\046\uffb5\047\uffb5\050" +
    "\072\001\002\000\050\005\uffb2\007\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\074\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\025\uffb2\027\uffb2\030\uffb2\040\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\001\002\000\050\005\uffb9\007\uffb9\012" +
    "\103\013\100\014\075\015\077\016\074\017\073\020\uffb9" +
    "\021\104\022\106\025\105\027\uffb9\030\uffb9\040\107\045" +
    "\uffb9\046\uffb9\047\uffb9\050\072\001\002\000\050\005\uffb1" +
    "\007\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\074\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\025\uffb1\027\uffb1\030\uffb1" +
    "\040\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\001\002\000" +
    "\050\005\uffb3\007\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\025\uffb3\027" +
    "\uffb3\030\uffb3\040\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\001\002\000\050\005\uffae\007\uffae\012\103\013\100\014" +
    "\075\015\077\016\074\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\025\uffae\027\uffae\030\uffae\040\107\045\uffae\046\uffae\047" +
    "\uffae\050\072\001\002\000\050\005\uffab\007\uffab\012\uffab" +
    "\013\uffab\014\075\015\077\016\074\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\025\uffab\027\uffab\030\uffab\040\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\001\002\000\004\057\127\001" +
    "\002\000\026\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\060\uffe1\061\uffe1\062\006\065\uffe1\071\uffe1\001\002\000" +
    "\006\056\uffc5\060\133\001\002\000\004\056\135\001\002" +
    "\000\004\056\uffc4\001\002\000\024\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\061\uffe1\062\006\065\uffe1\071\uffe1" +
    "\001\002\000\004\056\uffc3\001\002\000\030\011\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6" +
    "\064\uffc6\065\uffc6\071\uffc6\001\002\000\024\004\053\006" +
    "\061\012\065\026\055\041\063\067\070\070\051\071\062" +
    "\072\054\001\002\000\040\005\140\012\103\013\100\014" +
    "\075\015\077\016\074\017\073\020\102\021\104\022\106" +
    "\025\105\027\076\030\101\040\107\050\072\001\002\000" +
    "\050\005\uff9e\007\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\025\uff9e\027" +
    "\uff9e\030\uff9e\040\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\001\002\000\026\004\053\005\uffca\006\061\012\065\026" +
    "\055\041\063\067\070\070\051\071\062\072\054\001\002" +
    "\000\052\004\uff9c\005\uff9c\007\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\025\uff9c\027\uff9c\030\uff9c\040\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\001\002\000\052\004\uff96\005\uff96\007\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\025\uff96\027\uff96\030\uff96\040\uff96" +
    "\045\uff96\046\uff96\047\uff96\050\uff96\001\002\000\026\004" +
    "\053\006\061\012\065\026\055\041\063\047\146\067\070" +
    "\070\051\071\062\072\054\001\002\000\042\007\151\012" +
    "\103\013\100\014\075\015\077\016\074\017\073\020\102" +
    "\021\104\022\106\025\105\027\076\030\101\040\107\047" +
    "\152\050\072\001\002\000\024\004\053\006\061\012\065" +
    "\026\055\041\063\067\070\070\051\071\062\072\054\001" +
    "\002\000\040\007\150\012\103\013\100\014\075\015\077" +
    "\016\074\017\073\020\102\021\104\022\106\025\105\027" +
    "\076\030\101\040\107\050\072\001\002\000\052\004\uff97" +
    "\005\uff97\007\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\025\uff97\027\uff97" +
    "\030\uff97\040\uff97\045\uff97\046\uff97\047\uff97\050\uff97\001" +
    "\002\000\054\004\uff9d\005\uff9d\007\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\024\uff9d\025\uff9d\027\uff9d\030\uff9d\040\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\001\002\000\026\004\053\006" +
    "\061\007\153\012\065\026\055\041\063\067\070\070\051" +
    "\071\062\072\054\001\002\000\052\004\uff98\005\uff98\007" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\025\uff98\027\uff98\030\uff98\040" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\001\002\000\040" +
    "\007\155\012\103\013\100\014\075\015\077\016\074\017" +
    "\073\020\102\021\104\022\106\025\105\027\076\030\101" +
    "\040\107\050\072\001\002\000\052\004\uff99\005\uff99\007" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\025\uff99\027\uff99\030\uff99\040" +
    "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\001\002\000\006" +
    "\005\uffc9\007\uffc9\001\002\000\046\005\uffc8\007\uffc8\012" +
    "\103\013\100\014\075\015\077\016\074\017\073\020\102" +
    "\021\104\022\106\025\105\027\076\030\101\040\107\045" +
    "\uffc8\046\162\050\072\001\002\000\004\005\161\001\002" +
    "\000\054\004\uffcb\005\uffcb\006\uffcb\007\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\025\uffcb\027\uffcb\030\uffcb\040\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\001\002\000\024\004\053\006\061" +
    "\012\065\026\055\041\063\067\070\070\051\071\062\072" +
    "\054\001\002\000\010\005\uffc7\007\uffc7\045\uffc7\001\002" +
    "\000\004\007\165\001\002\000\052\004\uff9f\005\uff9f\007" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\025\uff9f\027\uff9f\030\uff9f\040" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\001\002\000\052" +
    "\004\uff9b\005\uff9b\007\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\025\uff9b" +
    "\027\uff9b\030\uff9b\040\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\001\002\000\052\004\uff95\005\uff95\007\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\025\uff95\027\uff95\030\uff95\040\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\001\002\000\050\005\uffb7\007" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\025\uffb7\027\uffb7\030\uffb7\040" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002\000\040" +
    "\005\172\012\103\013\100\014\075\015\077\016\074\017" +
    "\073\020\102\021\104\022\106\025\105\027\076\030\101" +
    "\040\107\050\072\001\002\000\052\005\uffa6\006\144\007" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\025\uffa6\027\uffa6\030\uffa6\040" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\001\002\000\052" +
    "\004\uff9a\005\uff9a\007\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\025\uff9a" +
    "\027\uff9a\030\uff9a\040\uff9a\045\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\001\002\000\052\004\uff94\005\uff94\007\uff94\012\uff94" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\025\uff94\027\uff94\030\uff94\040\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\001\002\000\040\012\103\013" +
    "\100\014\075\015\077\016\074\017\073\020\102\021\104" +
    "\022\106\025\105\027\076\030\101\040\107\045\176\050" +
    "\072\001\002\000\030\011\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\060\uffcd\061\uffcd\064\uffcd\065\uffcd\071" +
    "\uffcd\001\002\000\004\024\201\001\002\000\004\045\205" +
    "\001\002\000\024\004\053\006\061\012\065\026\055\041" +
    "\063\067\070\070\051\071\062\072\054\001\002\000\024" +
    "\004\053\006\061\012\065\026\055\041\063\067\070\070" +
    "\051\071\062\072\054\001\002\000\040\007\151\012\103" +
    "\013\100\014\075\015\077\016\074\017\073\020\102\021" +
    "\104\022\106\025\105\027\076\030\101\040\107\050\072" +
    "\001\002\000\004\045\uffbb\001\002\000\030\011\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd" +
    "\064\uffbd\065\uffbd\071\uffbd\001\002\000\004\045\207\001" +
    "\002\000\030\011\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\060\uffbc\061\uffbc\064\uffbc\065\uffbc\071\uffbc\001" +
    "\002\000\024\004\053\006\061\012\065\026\055\041\063" +
    "\067\070\070\051\071\062\072\054\001\002\000\040\005" +
    "\212\012\103\013\100\014\075\015\077\016\074\017\073" +
    "\020\102\021\104\022\106\025\105\027\076\030\101\040" +
    "\107\050\072\001\002\000\004\063\213\001\002\000\024" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\061\uffe1\062\006\064" +
    "\uffe1\065\uffe1\071\uffe1\001\002\000\004\064\215\001\002" +
    "\000\030\011\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\064\uffc2\065\uffc2\071\uffc2\001\002" +
    "\000\004\045\217\001\002\000\030\011\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\060\uffce\061\uffce\064\uffce" +
    "\065\uffce\071\uffce\001\002\000\004\071\221\001\002\000" +
    "\004\040\222\001\002\000\010\004\224\006\061\071\062" +
    "\001\002\000\004\004\232\001\002\000\024\004\053\006" +
    "\061\012\065\026\055\041\063\067\070\070\051\071\062" +
    "\072\054\001\002\000\004\004\uffbf\001\002\000\004\004" +
    "\uffc0\001\002\000\004\004\uffbe\001\002\000\040\005\231" +
    "\012\103\013\100\014\075\015\077\016\074\017\073\020" +
    "\102\021\104\022\106\025\105\027\076\030\101\040\107" +
    "\050\072\001\002\000\004\006\144\001\002\000\004\063" +
    "\233\001\002\000\024\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\061\uffe1\062\006\064\uffe1\065\uffe1\071\uffe1\001\002\000" +
    "\004\064\235\001\002\000\030\011\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\064\uffc1\065" +
    "\uffc1\071\uffc1\001\002\000\012\011\uffd9\056\uffd9\060\uffd9" +
    "\064\uffd9\001\002\000\030\011\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\064\uffcf\065\uffcf" +
    "\071\uffcf\001\002\000\040\012\103\013\100\014\075\015" +
    "\077\016\074\017\073\020\102\021\104\022\106\025\105" +
    "\027\076\030\101\040\107\045\241\050\072\001\002\000" +
    "\030\011\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\060\uffd0\061\uffd0\064\uffd0\065\uffd0\071\uffd0\001\002\000" +
    "\030\011\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\060\uffcc\061\uffcc\064\uffcc\065\uffcc\071\uffcc\001\002\000" +
    "\012\002\ufff8\042\ufff8\043\ufff8\062\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\004\246\001\002\000\006\005" +
    "\uffe6\062\247\001\002\000\022\031\266\032\272\033\257" +
    "\034\261\035\263\036\262\037\260\071\265\001\002\000" +
    "\006\005\uffe5\011\uffe5\001\002\000\010\005\uffea\011\uffea" +
    "\046\305\001\002\000\004\005\253\001\002\000\004\010" +
    "\254\001\002\000\024\011\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\061\uffe1\062\006\065\uffe1\071\uffe1\001\002\000" +
    "\004\011\256\001\002\000\024\031\266\032\272\033\257" +
    "\034\261\035\263\036\262\037\260\045\uffe4\071\265\001" +
    "\002\000\016\005\ufff3\011\ufff3\023\ufff3\024\ufff3\045\ufff3" +
    "\046\ufff3\001\002\000\016\005\ufff0\011\ufff0\023\ufff0\024" +
    "\ufff0\045\ufff0\046\ufff0\001\002\000\016\005\ufff4\011\ufff4" +
    "\023\ufff4\024\ufff4\045\ufff4\046\ufff4\001\002\000\004\022" +
    "\302\001\002\000\004\022\276\001\002\000\016\005\uffee" +
    "\011\uffee\023\uffee\024\uffee\045\uffee\046\uffee\001\002\000" +
    "\016\005\ufff5\011\ufff5\023\ufff5\024\ufff5\045\ufff5\046\ufff5" +
    "\001\002\000\016\005\ufff2\011\ufff2\023\ufff2\024\ufff2\045" +
    "\ufff2\046\ufff2\001\002\000\016\005\ufff7\011\ufff7\023\ufff7" +
    "\024\ufff7\045\ufff7\046\ufff7\001\002\000\004\045\275\001" +
    "\002\000\004\045\uffe3\001\002\000\016\005\ufff1\011\ufff1" +
    "\023\ufff1\024\ufff1\045\ufff1\046\ufff1\001\002\000\016\005" +
    "\uffef\011\uffef\023\uffef\024\uffef\045\uffef\046\uffef\001\002" +
    "\000\016\005\ufff6\011\ufff6\023\ufff6\024\ufff6\045\ufff6\046" +
    "\ufff6\001\002\000\014\002\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\062\uffe7\001\002\000\022\031\266\032\272\033\257\034" +
    "\261\035\263\036\262\037\260\071\265\001\002\000\004" +
    "\046\300\001\002\000\022\031\266\032\272\033\257\034" +
    "\261\035\263\036\262\037\260\071\265\001\002\000\016" +
    "\005\uffec\011\uffec\023\uffec\024\uffec\045\uffec\046\uffec\001" +
    "\002\000\022\031\266\032\272\033\257\034\261\035\263" +
    "\036\262\037\260\071\265\001\002\000\004\023\304\001" +
    "\002\000\016\005\uffed\011\uffed\023\uffed\024\uffed\045\uffed" +
    "\046\uffed\001\002\000\010\005\uffe6\011\uffe6\062\247\001" +
    "\002\000\006\005\uffe9\011\uffe9\001\002\000\010\005\uffe8" +
    "\011\uffe8\046\uffe8\001\002\000\004\002\000\001\002\000" +
    "\006\024\201\045\uffde\001\002\000\004\045\314\001\002" +
    "\000\004\045\uffdd\001\002\000\042\002\uffdf\011\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\071" +
    "\uffdf\001\002\000\006\002\ufffc\044\ufffc\001\002\000\004" +
    "\010\317\001\002\000\004\062\247\001\002\000\004\011" +
    "\321\001\002\000\004\045\322\001\002\000\014\002\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\062\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\020\002\007\003\012\004\011\005\004\014" +
    "\014\020\006\025\013\001\001\000\002\001\001\000\014" +
    "\003\314\005\004\014\014\020\006\025\013\001\001\000" +
    "\014\007\310\010\266\011\273\012\272\013\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\012\004\243\005\004\014" +
    "\014\020\006\025\013\001\001\000\002\001\001\000\010" +
    "\022\020\025\022\026\021\001\001\000\002\001\001\000" +
    "\032\024\033\031\027\032\031\033\045\034\041\035\046" +
    "\037\030\042\026\043\040\047\042\057\034\064\024\001" +
    "\001\000\006\025\022\026\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\050\066\052\065\054\051\055" +
    "\057\060\237\063\056\064\055\001\001\000\002\001\001" +
    "\000\030\031\027\032\235\033\045\034\041\035\046\037" +
    "\030\042\026\043\040\047\042\057\034\064\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\177\053\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\050\066" +
    "\052\065\054\051\055\057\060\174\063\056\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\050\066\052\065\054\051\055\057\060\063\063" +
    "\056\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\050\066\052\065\054\051\055\057\060\170\063" +
    "\056\064\055\001\001\000\002\001\001\000\020\050\066" +
    "\052\065\054\051\055\057\060\167\063\056\064\055\001" +
    "\001\000\006\053\165\056\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\050\066\052\065\054\051\055" +
    "\057\060\156\061\155\062\163\063\056\064\055\001\001" +
    "\000\006\053\141\056\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\050\066\052\065\054\051\055\057" +
    "\060\070\063\056\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\050\066\052\065\054\051\055\057\060\124\063\056\064" +
    "\055\001\001\000\020\050\066\052\065\054\051\055\057" +
    "\060\123\063\056\064\055\001\001\000\020\050\066\052" +
    "\065\054\051\055\057\060\122\063\056\064\055\001\001" +
    "\000\020\050\066\052\065\054\051\055\057\060\121\063" +
    "\056\064\055\001\001\000\020\050\066\052\065\054\051" +
    "\055\057\060\120\063\056\064\055\001\001\000\020\050" +
    "\066\052\065\054\051\055\057\060\117\063\056\064\055" +
    "\001\001\000\020\050\066\052\065\054\051\055\057\060" +
    "\116\063\056\064\055\001\001\000\020\050\066\052\065" +
    "\054\051\055\057\060\115\063\056\064\055\001\001\000" +
    "\020\050\066\052\065\054\051\055\057\060\114\063\056" +
    "\064\055\001\001\000\020\050\066\052\065\054\051\055" +
    "\057\060\113\063\056\064\055\001\001\000\020\050\066" +
    "\052\065\054\051\055\057\060\112\063\056\064\055\001" +
    "\001\000\020\050\066\052\065\054\051\055\057\060\111" +
    "\063\056\064\055\001\001\000\020\050\066\052\065\054" +
    "\051\055\057\060\110\063\056\064\055\001\001\000\020" +
    "\050\066\052\065\054\051\055\057\060\107\063\056\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\127\025\022\026\021\001\001\000\006\040\130\041" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\133\025\022\026\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\050\066\052\065\054\051\055\057" +
    "\060\136\063\056\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\050\066\052\065\054\051\055\057" +
    "\060\156\061\155\062\157\063\056\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\050\066\052\065" +
    "\054\051\055\057\060\144\063\056\064\055\001\001\000" +
    "\002\001\001\000\020\050\066\052\065\054\051\055\057" +
    "\060\146\063\056\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\050\066\052\065" +
    "\054\051\055\057\060\153\063\056\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\050\066\052\065\054\051\055\057\060\156" +
    "\061\162\063\056\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\172\056\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\205\001" +
    "\001\000\002\001\001\000\022\050\066\052\065\054\051" +
    "\055\057\060\156\061\203\063\056\064\055\001\001\000" +
    "\020\050\066\052\065\054\051\055\057\060\202\063\056" +
    "\064\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\050\066\052\065\054\051\055\057\060\210\063\056\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\213\025\022\026\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\222\050\226\051" +
    "\224\054\051\055\057\063\225\064\055\001\001\000\002" +
    "\001\001\000\020\050\066\052\065\054\051\055\057\060" +
    "\227\063\056\064\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\172\056\173\001\001\000\002\001\001\000\010\022\233" +
    "\025\022\026\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\247\017\250" +
    "\023\251\001\001\000\014\007\306\010\266\011\273\012" +
    "\272\013\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\254\025" +
    "\022\026\021\001\001\000\002\001\001\000\016\007\270" +
    "\010\266\011\273\012\272\013\263\021\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\276\010\266" +
    "\011\273\012\272\013\263\001\001\000\002\001\001\000" +
    "\014\007\300\010\266\011\273\012\272\013\263\001\001" +
    "\000\002\001\001\000\014\007\302\010\266\011\273\012" +
    "\272\013\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\247\017\250\023\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\311" +
    "\046\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\317\017\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean syntaxErrors = true;
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public void syntax_error(Symbol current_token) {
        report_error("Syntax error at line " + (current_token.left+1) + ", column "+ current_token.right, null);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_list_opt main_function declaration_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list_opt ::= program_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_declaration_list ::= declaration program_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= function_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= type_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_function ::= TK_MAIN TK_LBRACE body TK_RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_function",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= aggregate_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // primitive_type ::= TK_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // primitive_type ::= TK_RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // primitive_type ::= TK_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // primitive_type ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primitive_type ::= TK_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aggregate_type ::= sequence_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aggregate_type ::= dictionary_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sequence_type ::= TK_SEQUENCE TK_SMALLER type TK_LARGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dictionary_type ::= TK_DICTIONARY TK_SMALLER type TK_COMMA type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_definition ::= TK_TDEF TK_IDENTIFIER TK_LBRACE nonempty_declaration_list TK_RBRACE TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nonempty_declaration_list ::= nonassign_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_declaration_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nonempty_declaration_list ::= nonassign_declaration TK_COMMA declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_declaration_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nonassign_declaration ::= TK_HALF_DECLARATION type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonassign_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_definition ::= TK_FDEF TK_IDENTIFIER TK_LPAREN declaration_list TK_RPAREN TK_LBRACE body TK_RBRACE type_opt TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_list ::= nonempty_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_opt ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // body ::= variable_declaration_list_opt statements_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_declaration_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list_opt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_declaration_list_opt ::= variable_declaration variable_declaration_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list_opt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_declaration ::= TK_HALF_DECLARATION type rhs_assignment_opt TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rhs_assignment_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rhs_assignment_opt ::= rhs_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements_list_opt ::= statements_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statements_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statements_list ::= statement statements_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= read_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= while_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= forall_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // return_statement ::= TK_RETURN expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_statement ::= TK_RETURN TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_statement ::= TK_READ TK_IDENTIFIER TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_statement ::= TK_PRINT expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= function_call_expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_call_expression ::= TK_IDENTIFIER TK_LPAREN expressions_list_opt TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressions_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list_opt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressions_list_opt ::= expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list_opt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressions_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressions_list ::= expression TK_COMMA expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_statement ::= TK_IF TK_LPAREN expression TK_RPAREN TK_THEN body else_statement_opt TK_FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_statement_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_opt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_statement_opt ::= else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_opt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_statement ::= TK_ELSE body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while_loop ::= TK_WHILE TK_LPAREN expression TK_RPAREN TK_DO body TK_OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forall_loop ::= TK_FORALL TK_LPAREN TK_IDENTIFIER TK_IN iterable TK_LPAREN TK_DO body TK_OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forall_loop",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iterable ::= unknown_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iterable ::= dictionary_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // iterable ::= sequence_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= TK_IDENTIFIER rhs_assignment TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= TK_IDENTIFIER index rhs_assignment TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rhs_assignment ::= TK_ASSIGNMENT expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= unknown_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression TK_AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression TK_OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= TK_NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= TK_MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression TK_PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression TK_MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression TK_POWER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression TK_DIVIDE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression TK_TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression TK_SMALLER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression TK_SEQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression TK_EQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression TK_NOTEQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression TK_IMPLICATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression TK_COLON_COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= TK_BOOLEAN_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= TK_STRING_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= sequence_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= TK_LPAREN expression TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= len_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression TK_IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unknown_value ::= function_call_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unknown_value ::= TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unknown_value ::= value_index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unknown_value ::= value_substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sequence_constant ::= TK_LBRACKET expressions_list_opt TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_constant",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // len_expression ::= TK_LEN TK_LPAREN expression TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("len_expression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // index ::= TK_LBRACKET expression TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // value_index ::= TK_IDENTIFIER index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_index",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // value_index ::= function_call_expression index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_index",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // value_index ::= TK_LPAREN expression TK_RPAREN index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_index",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // substring ::= TK_LBRACKET expression TK_COLON expression TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substring",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // substring ::= TK_LBRACKET expression TK_COLON TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substring",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // substring ::= TK_LBRACKET TK_COLON expression TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substring",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // value_substring ::= TK_IDENTIFIER substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_substring",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // value_substring ::= function_call_expression substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_substring",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // value_substring ::= TK_LPAREN expression TK_RPAREN substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_substring",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

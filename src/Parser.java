
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\005\000\002\002\004\000\002\004" +
    "\002\000\002\004\003\000\002\003\003\000\002\003\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\007\006\000\002\006\006\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\006\000\002\013\006\000\002\014\010\000\002" +
    "\014\010\000\002\015\010\000\002\017\003\000\002\017" +
    "\005\000\002\020\004\000\002\021\014\000\002\024\002" +
    "\000\002\024\003\000\002\022\002\000\002\022\004\000" +
    "\002\023\004\000\002\030\002\000\002\030\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\026" +
    "\006\000\002\031\002\000\002\031\003\000\002\025\002" +
    "\000\002\025\003\000\002\034\003\000\002\034\004\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\035\005\000\002\035\004" +
    "\000\002\036\005\000\002\037\005\000\002\060\004\000" +
    "\002\065\006\000\002\063\002\000\002\063\003\000\002" +
    "\062\003\000\002\062\005\000\002\041\012\000\002\042" +
    "\002\000\002\042\003\000\002\043\004\000\002\044\011" +
    "\000\002\045\013\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\051\005\000\002\051\006\000\002" +
    "\050\004\000\002\061\003\000\002\061\005\000\002\061" +
    "\005\000\002\061\004\000\002\061\004\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\005\000\002" +
    "\061\003\000\002\061\005\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\005" +
    "\000\002\064\005\000\002\052\005\000\002\053\006\000" +
    "\002\054\005\000\002\055\004\000\002\055\004\000\002" +
    "\055\006\000\002\057\007\000\002\057\006\000\002\057" +
    "\006\000\002\056\004\000\002\056\004\000\002\056\006" +
    "\000\002\066\005\000\002\070\002\000\002\070\003\000" +
    "\002\067\003\000\002\067\005\000\002\071\005\000\002" +
    "\071\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\014\043\011\044\004\045\uffff\053\014\064" +
    "\007\001\002\000\004\076\360\001\002\000\016\002\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\053\ufffb\064\ufffb\001\002\000" +
    "\016\002\ufffd\043\011\044\004\045\ufffd\053\014\064\007" +
    "\001\002\000\022\032\030\034\020\035\022\036\024\037" +
    "\023\040\021\073\032\076\027\001\002\000\004\002\352" +
    "\001\002\000\004\076\331\001\002\000\016\002\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\053\ufff8\064\ufff8\001\002\000\004" +
    "\045\054\001\002\000\022\032\030\034\020\035\022\036" +
    "\024\037\023\040\021\073\032\076\027\001\002\000\006" +
    "\002\ufffe\045\ufffe\001\002\000\016\002\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\053\ufff9\064\ufff9\001\002\000\016\002\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\053\ufffa\064\ufffa\001\002\000" +
    "\020\005\ufff1\011\ufff1\024\ufff1\025\ufff1\047\ufff1\050\ufff1" +
    "\076\ufff1\001\002\000\020\005\uffee\011\uffee\024\uffee\025" +
    "\uffee\047\uffee\050\uffee\076\uffee\001\002\000\020\005\ufff2" +
    "\011\ufff2\024\ufff2\025\ufff2\047\ufff2\050\ufff2\076\ufff2\001" +
    "\002\000\004\023\046\001\002\000\004\023\037\001\002" +
    "\000\020\005\uffec\011\uffec\024\uffec\025\uffec\047\uffec\050" +
    "\uffec\076\uffec\001\002\000\020\005\ufff5\011\ufff5\024\ufff5" +
    "\025\ufff5\047\ufff5\050\ufff5\076\ufff5\001\002\000\020\005" +
    "\ufff3\011\ufff3\024\ufff3\025\ufff3\047\ufff3\050\ufff3\076\ufff3" +
    "\001\002\000\020\005\ufff0\011\ufff0\024\ufff0\025\ufff0\047" +
    "\ufff0\050\ufff0\076\ufff0\001\002\000\004\076\035\001\002" +
    "\000\020\005\uffef\011\uffef\024\uffef\025\uffef\047\uffef\050" +
    "\uffef\076\uffef\001\002\000\020\005\uffed\011\uffed\024\uffed" +
    "\025\uffed\047\uffed\050\uffed\076\uffed\001\002\000\020\005" +
    "\ufff4\011\ufff4\024\ufff4\025\ufff4\047\ufff4\050\ufff4\076\ufff4" +
    "\001\002\000\004\047\036\001\002\000\044\002\ufff7\011" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\066" +
    "\ufff7\067\ufff7\076\ufff7\001\002\000\022\032\030\034\020" +
    "\035\022\036\024\037\023\040\021\073\032\076\027\001" +
    "\002\000\004\050\041\001\002\000\024\032\030\034\020" +
    "\035\022\036\024\037\023\040\021\046\043\073\032\076" +
    "\027\001\002\000\004\024\045\001\002\000\004\024\044" +
    "\001\002\000\020\005\uffe8\011\uffe8\024\uffe8\025\uffe8\047" +
    "\uffe8\050\uffe8\076\uffe8\001\002\000\020\005\uffe9\011\uffe9" +
    "\024\uffe9\025\uffe9\047\uffe9\050\uffe9\076\uffe9\001\002\000" +
    "\024\032\030\034\020\035\022\036\024\037\023\040\021" +
    "\046\050\073\032\076\027\001\002\000\004\024\052\001" +
    "\002\000\004\024\051\001\002\000\020\005\uffea\011\uffea" +
    "\024\uffea\025\uffea\047\uffea\050\uffea\076\uffea\001\002\000" +
    "\020\005\uffeb\011\uffeb\024\uffeb\025\uffeb\047\uffeb\050\uffeb" +
    "\076\uffeb\001\002\000\014\002\uffff\043\011\044\004\053" +
    "\014\064\007\001\002\000\004\010\055\001\002\000\030" +
    "\011\uffdd\044\004\053\014\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\063\uffdd\064\007\067\uffdd\076\uffdd\001\002\000\036" +
    "\011\uffdd\044\004\053\014\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\062\uffdd\063\uffdd\064\007\066\uffdd\067\uffdd" +
    "\076\uffdd\001\002\000\004\011\326\001\002\000\030\011" +
    "\uffd5\054\065\055\075\056\103\057\104\060\uffd5\062\uffd5" +
    "\063\076\066\uffd5\067\072\076\077\001\002\000\036\011" +
    "\uffda\044\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\062\uffda\063\uffda\064\uffda\066\uffda\067\uffda\076" +
    "\uffda\001\002\000\036\011\uffdb\044\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\066\uffdb\067\uffdb\076\uffdb\001\002\000\036\011\uffd9" +
    "\044\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\076\uffd9" +
    "\001\002\000\004\047\325\001\002\000\036\004\112\006" +
    "\126\010\111\012\133\027\132\042\121\047\322\071\130" +
    "\072\113\073\117\074\116\075\120\076\125\077\114\001" +
    "\002\000\030\011\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\062\uffcc\063\uffcc\066\uffcc\067\uffcc\076\uffcc\001" +
    "\002\000\030\011\uffd3\054\065\055\075\056\103\057\104" +
    "\060\uffd3\062\uffd3\063\076\066\uffd3\067\072\076\077\001" +
    "\002\000\030\011\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\062\uffcd\063\uffcd\066\uffcd\067\uffcd\076\uffcd\001" +
    "\002\000\012\011\uffd4\060\uffd4\062\uffd4\066\uffd4\001\002" +
    "\000\004\004\303\001\002\000\012\011\uffde\060\uffde\062" +
    "\uffde\066\uffde\001\002\000\030\011\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\062\uffce\063\uffce\066\uffce\067" +
    "\uffce\076\uffce\001\002\000\004\076\301\001\002\000\004" +
    "\004\273\001\002\000\010\004\201\006\265\025\264\001" +
    "\002\000\030\011\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\066\uffcb\067\uffcb\076\uffcb\001" +
    "\002\000\030\011\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\062\uffd0\063\uffd0\066\uffd0\067\uffd0\076\uffd0\001" +
    "\002\000\030\011\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\062\uffd1\063\uffd1\066\uffd1\067\uffd1\076\uffd1\001" +
    "\002\000\034\004\112\006\126\010\111\012\133\027\132" +
    "\042\121\071\130\072\113\073\117\074\116\075\120\076" +
    "\125\077\114\001\002\000\004\004\107\001\002\000\030" +
    "\011\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062" +
    "\uffca\063\uffca\066\uffca\067\uffca\076\uffca\001\002\000\030" +
    "\011\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\062" +
    "\uffcf\063\uffcf\066\uffcf\067\uffcf\076\uffcf\001\002\000\034" +
    "\004\112\006\126\010\111\012\133\027\132\042\121\071" +
    "\130\072\113\073\117\074\116\075\120\076\125\077\114" +
    "\001\002\000\060\004\uff98\005\uff98\006\205\007\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\256" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\026\uff98\030\uff98\031" +
    "\uff98\041\uff98\047\uff98\050\uff98\051\uff98\052\uff98\001\002" +
    "\000\040\004\112\006\126\010\111\011\uff85\012\133\027" +
    "\132\042\121\064\244\071\130\072\113\073\117\074\116" +
    "\075\120\076\125\077\114\001\002\000\034\004\112\006" +
    "\126\010\111\012\133\027\132\042\121\071\130\072\113" +
    "\073\117\074\116\075\120\076\125\077\114\001\002\000" +
    "\052\005\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\026" +
    "\uffa1\030\uffa1\031\uffa1\041\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\001\002\000\052\005\uffa0\007\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\026\uffa0\030\uffa0\031\uffa0\041\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\001\002\000\052\005\uff9d" +
    "\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\026\uff9d\030\uff9d" +
    "\031\uff9d\041\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\001" +
    "\002\000\052\005\uff9e\007\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\041\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\001\002\000\052\005\uffa2\007\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\026\uffa2\030\uffa2\031\uffa2\041" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\001\002\000\052" +
    "\005\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\026\uff9f" +
    "\030\uff9f\031\uff9f\041\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\001\002\000\004\004\232\001\002\000\054\004\uff96" +
    "\005\uff96\007\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\020\uff96\021\uff96\022\uff96\023\uff96\026\uff96" +
    "\030\uff96\031\uff96\041\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\001\002\000\054\004\uff95\005\uff95\007\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\020\uff95\021" +
    "\uff95\022\uff95\023\uff95\026\uff95\030\uff95\031\uff95\041\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\001\002\000\040\005" +
    "\222\012\147\013\144\014\140\015\143\016\141\020\137" +
    "\021\146\022\150\023\152\026\151\030\142\031\145\041" +
    "\153\052\136\001\002\000\060\004\201\005\uff97\006\205" +
    "\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\204\020\uff97\021\uff97\022\uff97\023\uff97\026\uff97" +
    "\030\uff97\031\uff97\041\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\001\002\000\036\004\112\006\126\007\uffc3\010\111" +
    "\012\133\027\132\042\121\071\130\072\113\073\117\074" +
    "\116\075\120\076\125\077\114\001\002\000\052\005\uffb3" +
    "\007\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\041\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\001" +
    "\002\000\052\005\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\026\uffa3\030\uffa3\031\uffa3\041\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\001\002\000\052\005\uff9c\007\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\026\uff9c\030\uff9c\031\uff9c\041" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\001\002\000\034" +
    "\004\112\006\126\010\111\012\133\027\132\042\121\071" +
    "\130\072\113\073\117\074\116\075\120\076\125\077\114" +
    "\001\002\000\034\004\112\006\126\010\111\012\133\027" +
    "\132\042\121\071\130\072\113\073\117\074\116\075\120" +
    "\076\125\077\114\001\002\000\052\005\uff9a\007\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\026\uff9a\030\uff9a\031\uff9a\041" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\001\002\000\052" +
    "\005\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf" +
    "\030\uffaf\031\uffaf\041\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\001\002\000\034\004\112\006\126\010\111\012\133" +
    "\027\132\042\121\071\130\072\113\073\117\074\116\075" +
    "\120\076\125\077\114\001\002\000\034\004\112\006\126" +
    "\010\111\012\133\027\132\042\121\071\130\072\113\073" +
    "\117\074\116\075\120\076\125\077\114\001\002\000\034" +
    "\004\112\006\126\010\111\012\133\027\132\042\121\071" +
    "\130\072\113\073\117\074\116\075\120\076\125\077\114" +
    "\001\002\000\034\004\112\006\126\010\111\012\133\027" +
    "\132\042\121\071\130\072\113\073\117\074\116\075\120" +
    "\076\125\077\114\001\002\000\034\004\112\006\126\010" +
    "\111\012\133\027\132\042\121\071\130\072\113\073\117" +
    "\074\116\075\120\076\125\077\114\001\002\000\034\004" +
    "\112\006\126\010\111\012\133\027\132\042\121\071\130" +
    "\072\113\073\117\074\116\075\120\076\125\077\114\001" +
    "\002\000\034\004\112\006\126\010\111\012\133\027\132" +
    "\042\121\071\130\072\113\073\117\074\116\075\120\076" +
    "\125\077\114\001\002\000\034\004\112\006\126\010\111" +
    "\012\133\027\132\042\121\071\130\072\113\073\117\074" +
    "\116\075\120\076\125\077\114\001\002\000\034\004\112" +
    "\006\126\010\111\012\133\027\132\042\121\071\130\072" +
    "\113\073\117\074\116\075\120\076\125\077\114\001\002" +
    "\000\034\004\112\006\126\010\111\012\133\027\132\042" +
    "\121\071\130\072\113\073\117\074\116\075\120\076\125" +
    "\077\114\001\002\000\034\004\112\006\126\010\111\012" +
    "\133\027\132\042\121\071\130\072\113\073\117\074\116" +
    "\075\120\076\125\077\114\001\002\000\034\004\112\006" +
    "\126\010\111\012\133\027\132\042\121\071\130\072\113" +
    "\073\117\074\116\075\120\076\125\077\114\001\002\000" +
    "\034\004\112\006\126\010\111\012\133\027\132\042\121" +
    "\071\130\072\113\073\117\074\116\075\120\076\125\077" +
    "\114\001\002\000\034\004\112\006\126\010\111\012\133" +
    "\027\132\042\121\071\130\072\113\073\117\074\116\075" +
    "\120\076\125\077\114\001\002\000\052\005\uff99\007\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\140\015\143\016\141\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\026\uff99\030\uff99\031\uff99" +
    "\041\uff99\047\uff99\050\uff99\051\uff99\052\uff99\001\002\000" +
    "\052\005\uffa9\007\uffa9\011\uffa9\012\147\013\144\014\140" +
    "\015\143\016\141\020\uffa9\021\uffa9\022\uffa9\023\uffa9\026" +
    "\uffa9\030\uffa9\031\uffa9\041\153\047\uffa9\050\uffa9\051\uffa9" +
    "\052\136\001\002\000\052\005\uffa8\007\uffa8\011\uffa8\012" +
    "\147\013\144\014\140\015\143\016\141\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\026\uffa8\030\uffa8\031\uffa8\041\153\047" +
    "\uffa8\050\uffa8\051\uffa8\052\136\001\002\000\052\005\uffa6" +
    "\007\uffa6\011\uffa6\012\147\013\144\014\140\015\143\016" +
    "\141\020\uffa6\021\uffa6\022\uffa6\023\uffa6\026\uffa6\030\uffa6" +
    "\031\uffa6\041\153\047\uffa6\050\uffa6\051\uffa6\052\136\001" +
    "\002\000\052\005\uffad\007\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\140\015\143\016\141\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\026\uffad\030\uffad\031\uffad\041\153\047\uffad\050\uffad" +
    "\051\uffad\052\136\001\002\000\052\005\uffa5\007\uffa5\011" +
    "\uffa5\012\147\013\144\014\140\015\143\016\141\020\137" +
    "\021\uffa5\022\150\023\152\026\151\030\uffa5\031\uffa5\041" +
    "\153\047\uffa5\050\uffa5\051\uffa5\052\136\001\002\000\052" +
    "\005\uffb1\007\uffb1\011\uffb1\012\147\013\144\014\140\015" +
    "\143\016\141\020\137\021\uffb1\022\150\023\152\026\151" +
    "\030\uffb1\031\uffb1\041\153\047\uffb1\050\uffb1\051\uffb1\052" +
    "\136\001\002\000\052\005\uffae\007\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\140\015\143\016\141\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\026\uffae\030\uffae\031\uffae\041\153\047\uffae" +
    "\050\uffae\051\uffae\052\136\001\002\000\052\005\uffab\007" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\141" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\026\uffab\030\uffab\031" +
    "\uffab\041\uffab\047\uffab\050\uffab\051\uffab\052\uffab\001\002" +
    "\000\052\005\uffb2\007\uffb2\011\uffb2\012\147\013\144\014" +
    "\140\015\143\016\141\020\137\021\uffb2\022\150\023\152" +
    "\026\151\030\uffb2\031\uffb2\041\153\047\uffb2\050\uffb2\051" +
    "\uffb2\052\136\001\002\000\052\005\uffac\007\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\026\uffac\030\uffac\031\uffac\041\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\001\002\000\052\005" +
    "\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\141\020\uffaa\021\uffaa\022\uffaa\023\uffaa\026\uffaa\030" +
    "\uffaa\031\uffaa\041\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\001\002\000\052\005\uffa7\007\uffa7\011\uffa7\012\147\013" +
    "\144\014\140\015\143\016\141\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\026\uffa7\030\uffa7\031\uffa7\041\153\047\uffa7\050" +
    "\uffa7\051\uffa7\052\136\001\002\000\052\005\uffa4\007\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\140\015\143\016\141\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\026\uffa4\030\uffa4\031\uffa4" +
    "\041\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\001\002\000" +
    "\052\005\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026" +
    "\uffb0\030\uffb0\031\uffb0\041\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\001\002\000\006\005\uffc2\007\uffc2\001\002\000" +
    "\046\005\uffc1\007\uffc1\012\147\013\144\014\140\015\143" +
    "\016\141\020\137\021\146\022\150\023\152\026\151\030" +
    "\142\031\145\041\153\047\uffc1\050\177\052\136\001\002" +
    "\000\004\007\176\001\002\000\054\004\uff92\005\uff92\007" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\026\uff92\030\uff92\031" +
    "\uff92\041\uff92\047\uff92\050\uff92\051\uff92\052\uff92\001\002" +
    "\000\034\004\112\006\126\010\111\012\133\027\132\042" +
    "\121\071\130\072\113\073\117\074\116\075\120\076\125" +
    "\077\114\001\002\000\010\005\uffc0\007\uffc0\047\uffc0\001" +
    "\002\000\036\004\112\005\uffc3\006\126\010\111\012\133" +
    "\027\132\042\121\071\130\072\113\073\117\074\116\075" +
    "\120\076\125\077\114\001\002\000\054\004\uff8f\005\uff8f" +
    "\007\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\026\uff8f\030\uff8f" +
    "\031\uff8f\041\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\001" +
    "\002\000\054\004\uff89\005\uff89\007\uff89\011\uff89\012\uff89" +
    "\013\uff89\014\uff89\015\uff89\016\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\026\uff89\030\uff89\031\uff89\041\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\001\002\000\004\076\217\001" +
    "\002\000\036\004\112\006\126\010\111\012\133\027\132" +
    "\042\121\051\207\071\130\072\113\073\117\074\116\075" +
    "\120\076\125\077\114\001\002\000\042\007\212\012\147" +
    "\013\144\014\140\015\143\016\141\020\137\021\146\022" +
    "\150\023\152\026\151\030\142\031\145\041\153\051\213" +
    "\052\136\001\002\000\034\004\112\006\126\010\111\012" +
    "\133\027\132\042\121\071\130\072\113\073\117\074\116" +
    "\075\120\076\125\077\114\001\002\000\040\007\211\012" +
    "\147\013\144\014\140\015\143\016\141\020\137\021\146" +
    "\022\150\023\152\026\151\030\142\031\145\041\153\052" +
    "\136\001\002\000\054\004\uff8a\005\uff8a\007\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\020\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\026\uff8a\030\uff8a\031\uff8a\041\uff8a" +
    "\047\uff8a\050\uff8a\051\uff8a\052\uff8a\001\002\000\056\004" +
    "\uff90\005\uff90\007\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\020\uff90\021\uff90\022\uff90\023\uff90\025" +
    "\uff90\026\uff90\030\uff90\031\uff90\041\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\001\002\000\036\004\112\006\126\007" +
    "\214\010\111\012\133\027\132\042\121\071\130\072\113" +
    "\073\117\074\116\075\120\076\125\077\114\001\002\000" +
    "\054\004\uff8b\005\uff8b\007\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\026\uff8b\030\uff8b\031\uff8b\041\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\001\002\000\040\007\216\012\147\013" +
    "\144\014\140\015\143\016\141\020\137\021\146\022\150" +
    "\023\152\026\151\030\142\031\145\041\153\052\136\001" +
    "\002\000\054\004\uff8c\005\uff8c\007\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\026\uff8c\030\uff8c\031\uff8c\041\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\001\002\000\054\004\uff94\005" +
    "\uff94\007\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\020\uff94\021\uff94\022\uff94\023\uff94\026\uff94\030" +
    "\uff94\031\uff94\041\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\001\002\000\004\005\221\001\002\000\060\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\026\uffc4\030\uffc4\031\uffc4\041\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\004\061\223\001\002\000" +
    "\032\044\004\053\014\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\062\uffdd\063\uffdd\064\007\067\uffdd\076\uffdd\001" +
    "\002\000\006\060\uffbe\062\226\001\002\000\004\060\231" +
    "\001\002\000\030\044\004\053\014\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\063\uffdd\064\007\067\uffdd\076\uffdd" +
    "\001\002\000\004\060\uffbd\001\002\000\004\060\uffbc\001" +
    "\002\000\030\011\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\062\uffbf\063\uffbf\066\uffbf\067\uffbf\076\uffbf\001" +
    "\002\000\034\004\112\006\126\010\111\012\133\027\132" +
    "\042\121\071\130\072\113\073\117\074\116\075\120\076" +
    "\125\077\114\001\002\000\040\005\234\012\147\013\144" +
    "\014\140\015\143\016\141\020\137\021\146\022\150\023" +
    "\152\026\151\030\142\031\145\041\153\052\136\001\002" +
    "\000\052\005\uff91\007\uff91\011\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\026\uff91\030\uff91\031\uff91\041\uff91\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\001\002\000\040\005\236\012\147\013\144" +
    "\014\140\015\143\016\141\020\137\021\146\022\150\023" +
    "\152\026\151\030\142\031\145\041\153\052\136\001\002" +
    "\000\054\005\uff9b\006\205\007\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\026\uff9b\030\uff9b\031\uff9b\041\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\001\002\000\054\004\uff8d\005\uff8d" +
    "\007\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\026\uff8d\030\uff8d" +
    "\031\uff8d\041\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\001" +
    "\002\000\054\004\uff87\005\uff87\007\uff87\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\026\uff87\030\uff87\031\uff87\041\uff87\047\uff87" +
    "\050\uff87\051\uff87\052\uff87\001\002\000\004\011\253\001" +
    "\002\000\004\011\uff84\001\002\000\040\012\147\013\144" +
    "\014\140\015\143\016\141\020\137\021\146\022\150\023" +
    "\152\026\151\030\142\031\145\041\153\051\251\052\136" +
    "\001\002\000\034\004\112\006\126\010\111\012\133\027" +
    "\132\042\121\071\130\072\113\073\117\074\116\075\120" +
    "\076\125\077\114\001\002\000\006\011\uff83\050\246\001" +
    "\002\000\036\004\112\006\126\010\111\012\133\027\132" +
    "\042\121\064\244\071\130\072\113\073\117\074\116\075" +
    "\120\076\125\077\114\001\002\000\004\011\uff82\001\002" +
    "\000\042\011\uff80\012\147\013\144\014\140\015\143\016" +
    "\141\020\137\021\146\022\150\023\152\026\151\030\142" +
    "\031\145\041\153\050\uff80\052\136\001\002\000\034\004" +
    "\112\006\126\010\111\012\133\027\132\042\121\071\130" +
    "\072\113\073\117\074\116\075\120\076\125\077\114\001" +
    "\002\000\042\011\uff81\012\147\013\144\014\140\015\143" +
    "\016\141\020\137\021\146\022\150\023\152\026\151\030" +
    "\142\031\145\041\153\050\uff81\052\136\001\002\000\054" +
    "\004\uff86\005\uff86\007\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\020\uff86\021\uff86\022\uff86\023\uff86" +
    "\026\uff86\030\uff86\031\uff86\041\uff86\047\uff86\050\uff86\051" +
    "\uff86\052\uff86\001\002\000\054\004\uff8e\005\uff8e\007\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\023\uff8e\026\uff8e\030\uff8e\031\uff8e" +
    "\041\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\001\002\000" +
    "\054\004\uff88\005\uff88\007\uff88\011\uff88\012\uff88\013\uff88" +
    "\014\uff88\015\uff88\016\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\026\uff88\030\uff88\031\uff88\041\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\001\002\000\004\076\257\001\002\000" +
    "\054\004\uff93\005\uff93\007\uff93\011\uff93\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\026\uff93\030\uff93\031\uff93\041\uff93\047\uff93\050\uff93" +
    "\051\uff93\052\uff93\001\002\000\040\012\147\013\144\014" +
    "\140\015\143\016\141\020\137\021\146\022\150\023\152" +
    "\026\151\030\142\031\145\041\153\047\261\052\136\001" +
    "\002\000\030\011\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\062\uffc6\063\uffc6\066\uffc6\067\uffc6\076\uffc6\001" +
    "\002\000\004\047\272\001\002\000\004\025\264\001\002" +
    "\000\034\004\112\006\126\010\111\012\133\027\132\042" +
    "\121\071\130\072\113\073\117\074\116\075\120\076\125" +
    "\077\114\001\002\000\034\004\112\006\126\010\111\012" +
    "\133\027\132\042\121\071\130\072\113\073\117\074\116" +
    "\075\120\076\125\077\114\001\002\000\040\007\212\012" +
    "\147\013\144\014\140\015\143\016\141\020\137\021\146" +
    "\022\150\023\152\026\151\030\142\031\145\041\153\052" +
    "\136\001\002\000\004\047\uffb4\001\002\000\004\047\271" +
    "\001\002\000\030\011\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\062\uffb5\063\uffb5\066\uffb5\067\uffb5\076\uffb5" +
    "\001\002\000\030\011\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\062\uffb6\063\uffb6\066\uffb6\067\uffb6\076\uffb6" +
    "\001\002\000\034\004\112\006\126\010\111\012\133\027" +
    "\132\042\121\071\130\072\113\073\117\074\116\075\120" +
    "\076\125\077\114\001\002\000\040\005\275\012\147\013" +
    "\144\014\140\015\143\016\141\020\137\021\146\022\150" +
    "\023\152\026\151\030\142\031\145\041\153\052\136\001" +
    "\002\000\004\065\276\001\002\000\030\044\004\053\014" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd\064\007\066" +
    "\uffdd\067\uffdd\076\uffdd\001\002\000\004\066\300\001\002" +
    "\000\030\011\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\062\uffbb\063\uffbb\066\uffbb\067\uffbb\076\uffbb\001\002" +
    "\000\004\047\302\001\002\000\030\011\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7\063\uffc7\066\uffc7" +
    "\067\uffc7\076\uffc7\001\002\000\004\076\304\001\002\000" +
    "\004\041\305\001\002\000\012\004\307\006\126\010\111" +
    "\076\125\001\002\000\004\004\315\001\002\000\034\004" +
    "\112\006\126\010\111\012\133\027\132\042\121\071\130" +
    "\072\113\073\117\074\116\075\120\076\125\077\114\001" +
    "\002\000\004\004\uffb8\001\002\000\004\004\uffb9\001\002" +
    "\000\004\004\uffb7\001\002\000\040\005\314\012\147\013" +
    "\144\014\140\015\143\016\141\020\137\021\146\022\150" +
    "\023\152\026\151\030\142\031\145\041\153\052\136\001" +
    "\002\000\004\006\205\001\002\000\004\065\316\001\002" +
    "\000\030\044\004\053\014\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\063\uffdd\064\007\066\uffdd\067\uffdd\076\uffdd\001\002" +
    "\000\004\066\320\001\002\000\030\011\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\062\uffba\063\uffba\066\uffba" +
    "\067\uffba\076\uffba\001\002\000\012\011\uffd2\060\uffd2\062" +
    "\uffd2\066\uffd2\001\002\000\030\011\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\066\uffc8\067" +
    "\uffc8\076\uffc8\001\002\000\040\012\147\013\144\014\140" +
    "\015\143\016\141\020\137\021\146\022\150\023\152\026" +
    "\151\030\142\031\145\041\153\047\324\052\136\001\002" +
    "\000\030\011\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\066\uffc9\067\uffc9\076\uffc9\001\002" +
    "\000\030\011\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\062\uffc5\063\uffc5\066\uffc5\067\uffc5\076\uffc5\001\002" +
    "\000\014\002\ufff6\043\ufff6\044\ufff6\053\ufff6\064\ufff6\001" +
    "\002\000\030\011\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\062\uffdc\063\uffdc\066\uffdc\067\uffdc\076\uffdc\001" +
    "\002\000\004\002\001\001\002\000\004\004\332\001\002" +
    "\000\006\005\uffe2\064\333\001\002\000\022\032\030\034" +
    "\020\035\022\036\024\037\023\040\021\073\032\076\027" +
    "\001\002\000\006\005\uffe1\011\uffe1\001\002\000\010\005" +
    "\uffe6\011\uffe6\050\347\001\002\000\004\005\337\001\002" +
    "\000\004\010\340\001\002\000\030\011\uffdd\044\004\053" +
    "\014\054\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd\064\007" +
    "\067\uffdd\076\uffdd\001\002\000\004\011\342\001\002\000" +
    "\006\047\uffe0\051\343\001\002\000\022\032\030\034\020" +
    "\035\022\036\024\037\023\040\021\073\032\076\027\001" +
    "\002\000\004\047\345\001\002\000\016\002\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\053\uffe3\064\uffe3\001\002\000\004\047" +
    "\uffdf\001\002\000\010\005\uffe2\011\uffe2\064\333\001\002" +
    "\000\006\005\uffe5\011\uffe5\001\002\000\010\005\uffe4\011" +
    "\uffe4\050\uffe4\001\002\000\004\002\000\001\002\000\006" +
    "\025\264\047\uffd7\001\002\000\004\047\356\001\002\000" +
    "\004\047\uffd6\001\002\000\044\002\uffd8\011\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\067\uffd8" +
    "\076\uffd8\001\002\000\006\002\ufffc\045\ufffc\001\002\000" +
    "\004\010\361\001\002\000\004\064\333\001\002\000\004" +
    "\011\363\001\002\000\004\047\364\001\002\000\044\002" +
    "\uffe7\011\uffe7\043\uffe7\044\uffe7\045\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\066\uffe7\067\uffe7\076\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\022\002\007\003\014\004\012\005\005\007" +
    "\011\015\016\021\004\026\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\356\005\005\007\011\015" +
    "\016\021\004\026\015\001\001\000\014\010\352\011\025" +
    "\012\033\013\032\014\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\052\001\001" +
    "\000\014\010\030\011\025\012\033\013\032\014\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\037\011" +
    "\025\012\033\013\032\014\024\001\001\000\002\001\001" +
    "\000\014\010\041\011\025\012\033\013\032\014\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\046\011\025\012\033\013" +
    "\032\014\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\014\004" +
    "\327\005\005\007\011\015\016\021\004\026\015\001\001" +
    "\000\002\001\001\000\016\007\060\015\062\023\056\026" +
    "\061\027\055\030\057\001\001\000\014\007\060\015\062" +
    "\026\061\027\055\030\326\001\001\000\002\001\001\000" +
    "\032\025\072\033\066\034\070\035\104\036\100\037\105" +
    "\041\067\044\065\045\077\051\101\060\073\065\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\052\114\053\133\055\121\056" +
    "\122\061\322\064\126\065\107\066\130\001\001\000\002" +
    "\001\001\000\030\033\066\034\320\035\104\036\100\037" +
    "\105\041\067\044\065\045\077\051\101\060\073\065\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\261\054\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\052\114\053\133\055\121\056\122\061\257\064\126\065" +
    "\107\066\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\052\114\053\133\055\121\056" +
    "\122\061\123\064\126\065\107\066\130\001\001\000\006" +
    "\054\253\057\254\001\001\000\030\052\114\053\133\055" +
    "\121\056\122\061\242\064\126\065\107\066\130\067\241" +
    "\070\240\071\244\001\001\000\022\052\114\053\133\055" +
    "\121\056\122\061\234\064\126\065\107\066\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\054\201\057\202\001\001\000\026\052\114" +
    "\053\133\055\121\056\122\061\173\062\172\063\174\064" +
    "\126\065\107\066\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\052\114\053\133\055" +
    "\121\056\122\061\171\064\126\065\107\066\130\001\001" +
    "\000\022\052\114\053\133\055\121\056\122\061\134\064" +
    "\126\065\107\066\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\052\114\053\133\055\121\056\122\061" +
    "\170\064\126\065\107\066\130\001\001\000\022\052\114" +
    "\053\133\055\121\056\122\061\167\064\126\065\107\066" +
    "\130\001\001\000\022\052\114\053\133\055\121\056\122" +
    "\061\166\064\126\065\107\066\130\001\001\000\022\052" +
    "\114\053\133\055\121\056\122\061\165\064\126\065\107" +
    "\066\130\001\001\000\022\052\114\053\133\055\121\056" +
    "\122\061\164\064\126\065\107\066\130\001\001\000\022" +
    "\052\114\053\133\055\121\056\122\061\163\064\126\065" +
    "\107\066\130\001\001\000\022\052\114\053\133\055\121" +
    "\056\122\061\162\064\126\065\107\066\130\001\001\000" +
    "\022\052\114\053\133\055\121\056\122\061\161\064\126" +
    "\065\107\066\130\001\001\000\022\052\114\053\133\055" +
    "\121\056\122\061\160\064\126\065\107\066\130\001\001" +
    "\000\022\052\114\053\133\055\121\056\122\061\157\064" +
    "\126\065\107\066\130\001\001\000\022\052\114\053\133" +
    "\055\121\056\122\061\156\064\126\065\107\066\130\001" +
    "\001\000\022\052\114\053\133\055\121\056\122\061\155" +
    "\064\126\065\107\066\130\001\001\000\022\052\114\053" +
    "\133\055\121\056\122\061\154\064\126\065\107\066\130" +
    "\001\001\000\022\052\114\053\133\055\121\056\122\061" +
    "\153\064\126\065\107\066\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\052\114\053\133" +
    "\055\121\056\122\061\173\062\177\064\126\065\107\066" +
    "\130\001\001\000\002\001\001\000\026\052\114\053\133" +
    "\055\121\056\122\061\173\062\172\063\217\064\126\065" +
    "\107\066\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\052\114\053\133\055\121\056" +
    "\122\061\205\064\126\065\107\066\130\001\001\000\002" +
    "\001\001\000\022\052\114\053\133\055\121\056\122\061" +
    "\207\064\126\065\107\066\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\052\114\053" +
    "\133\055\121\056\122\061\214\064\126\065\107\066\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\060\015\062\023\223\026" +
    "\061\027\055\030\057\001\001\000\006\042\224\043\226" +
    "\001\001\000\002\001\001\000\016\007\060\015\062\023" +
    "\227\026\061\027\055\030\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\052\114\053" +
    "\133\055\121\056\122\061\232\064\126\065\107\066\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\054\236\057\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\052\114\053\133\055\121\056\122" +
    "\061\247\064\126\065\107\066\130\001\001\000\002\001" +
    "\001\000\026\052\114\053\133\055\121\056\122\061\242" +
    "\064\126\065\107\066\130\067\246\071\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\052\114\053\133" +
    "\055\121\056\122\061\251\064\126\065\107\066\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\267\001\001\000\024\052\114\053\133\055\121\056" +
    "\122\061\173\062\266\064\126\065\107\066\130\001\001" +
    "\000\022\052\114\053\133\055\121\056\122\061\265\064" +
    "\126\065\107\066\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\052\114\053\133\055\121\056\122\061\273" +
    "\064\126\065\107\066\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\060\015\062\023\276\026\061" +
    "\027\055\030\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\046\305\052\311\055\121\056" +
    "\122\064\310\065\107\066\307\001\001\000\002\001\001" +
    "\000\022\052\114\053\133\055\121\056\122\061\312\064" +
    "\126\065\107\066\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\054" +
    "\236\057\237\001\001\000\002\001\001\000\016\007\060" +
    "\015\062\023\316\026\061\027\055\030\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\333\020\334\024\335\001" +
    "\001\000\014\010\350\011\025\012\033\013\032\014\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\060\015\062\023\340" +
    "\026\061\027\055\030\057\001\001\000\002\001\001\000" +
    "\004\022\343\001\001\000\014\010\345\011\025\012\033" +
    "\013\032\014\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\333\020\334\024\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\353\050\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\361\020\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean syntaxErrors = true;
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public void syntax_error(Symbol current_token) {
        report_error("Syntax error at line " + (current_token.left+1) + ", column "+ current_token.right, null);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_list_opt main_function declaration_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list_opt ::= program_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_declaration_list ::= declaration program_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= function_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= type_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // alias_declaration ::= TK_ALIAS type TK_IDENTIFIER TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_function ::= TK_MAIN TK_LBRACE body TK_RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_function",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= primitive_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= aggregate_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // primitive_type ::= TK_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // primitive_type ::= TK_RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primitive_type ::= TK_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primitive_type ::= TK_FLOAT_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primitive_type ::= TK_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aggregate_type ::= sequence_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aggregate_type ::= dictionary_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregate_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sequence_type ::= TK_SEQUENCE TK_SMALLER type TK_LARGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sequence_type ::= TK_SEQUENCE TK_SMALLER TK_TOP TK_LARGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dictionary_type ::= TK_DICTIONARY TK_SMALLER type TK_COMMA type TK_LARGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dictionary_type ::= TK_DICTIONARY TK_SMALLER type TK_COMMA TK_TOP TK_LARGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_definition ::= TK_TDEF TK_IDENTIFIER TK_LBRACE nonempty_declaration_list TK_RBRACE TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nonempty_declaration_list ::= nonassign_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_declaration_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nonempty_declaration_list ::= nonassign_declaration TK_COMMA declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_declaration_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nonassign_declaration ::= TK_HALF_DECLARATION type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonassign_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_definition ::= TK_FDEF TK_IDENTIFIER TK_LPAREN declaration_list TK_RPAREN TK_LBRACE body TK_RBRACE type_opt TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_list ::= nonempty_declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_opt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_opt ::= TK_COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_opt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // body ::= body_declaration_list_opt statements_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body_declaration_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_declaration_list_opt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body_declaration_list_opt ::= body_declaration body_declaration_list_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_declaration_list_opt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // body_declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // body_declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // body_declaration ::= type_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_declaration",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_declaration ::= TK_HALF_DECLARATION type rhs_assignment_opt TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rhs_assignment_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment_opt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rhs_assignment_opt ::= rhs_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment_opt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statements_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list_opt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statements_list_opt ::= statements_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list_opt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statements_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statements_list ::= statement statements_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= read_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= print_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= while_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= forall_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // return_statement ::= TK_RETURN expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // return_statement ::= TK_RETURN TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // read_statement ::= TK_READ TK_IDENTIFIER TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print_statement ::= TK_PRINT expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_call ::= function_call_expression TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_call_expression ::= TK_IDENTIFIER TK_LPAREN expressions_list_opt TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_expression",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressions_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list_opt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressions_list_opt ::= expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list_opt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressions_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressions_list ::= expression TK_COMMA expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_statement ::= TK_IF TK_LPAREN expression TK_RPAREN TK_THEN body else_statement_opt TK_FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // else_statement_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_opt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_statement_opt ::= else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_opt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_statement ::= TK_ELSE body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_loop ::= TK_WHILE TK_LPAREN expression TK_RPAREN TK_DO body TK_OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_loop",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // forall_loop ::= TK_FORALL TK_LPAREN TK_IDENTIFIER TK_IN iterable TK_LPAREN TK_DO body TK_OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forall_loop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // iterable ::= unknown_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // iterable ::= dictionary_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // iterable ::= sequence_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment ::= TK_IDENTIFIER rhs_assignment TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment ::= TK_IDENTIFIER index rhs_assignment TK_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // rhs_assignment ::= TK_ASSIGNMENT expressions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rhs_assignment",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= unknown_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression TK_AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression TK_OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= TK_NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= TK_MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression TK_PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression TK_MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression TK_POWER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression TK_DIVIDE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression TK_TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression TK_SMALLER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression TK_SEQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression TK_EQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression TK_NOTEQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression TK_IMPLICATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression TK_COLON_COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= TK_INTEGER_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= TK_FLOAT_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= TK_BOOLEAN_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= TK_STRING_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= TK_CHAR_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= TK_RATIONAL_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= sequence_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= dictionary_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= TK_LPAREN expression TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= len_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= expression TK_IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unknown_value ::= function_call_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unknown_value ::= TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unknown_value ::= value_index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unknown_value ::= value_substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unknown_value ::= TK_IDENTIFIER TK_DOT TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unknown_value ::= function_call_expression TK_DOT TK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unknown_value",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sequence_constant ::= TK_LBRACKET expressions_list_opt TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_constant",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // len_expression ::= TK_LEN TK_LPAREN expression TK_RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("len_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // index ::= TK_LBRACKET expression TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // value_index ::= TK_IDENTIFIER index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_index",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // value_index ::= function_call_expression index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_index",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // value_index ::= TK_LPAREN expression TK_RPAREN index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_index",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // substring ::= TK_LBRACKET expression TK_COLON expression TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substring",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // substring ::= TK_LBRACKET expression TK_COLON TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substring",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // substring ::= TK_LBRACKET TK_COLON expression TK_RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substring",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // value_substring ::= TK_IDENTIFIER substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_substring",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // value_substring ::= function_call_expression substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_substring",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // value_substring ::= TK_LPAREN expression TK_RPAREN substring 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_substring",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // dictionary_constant ::= TK_LBRACE dictionary_list_opt TK_RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_constant",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // dictionary_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list_opt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // dictionary_list_opt ::= dictionary_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list_opt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // dictionary_list ::= dictionary_list_entry 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // dictionary_list ::= dictionary_list_entry TK_COMMA dictionary_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dictionary_list_entry ::= expression TK_COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list_entry",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dictionary_list_entry ::= TK_HALF_DECLARATION expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictionary_list_entry",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

/* The following code was generated by JFlex 1.6.0 */

/* JFlex example: part of Java language lexer specification */

import java_cup.runtime.*;
/**
 * This class is a simple example lexer.
 */

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\2\2\22\0\1\2\1\37\1\10\1\3"+
    "\2\0\1\24\1\14\1\20\1\21\1\34\1\33\1\31\1\32\1\11"+
    "\1\4\12\7\1\16\1\30\1\40\1\17\1\36\2\0\5\12\1\5"+
    "\15\12\1\5\6\12\1\26\1\0\1\27\1\35\1\6\1\0\1\42"+
    "\1\54\1\52\1\55\1\57\1\46\1\12\1\53\1\43\2\12\1\47"+
    "\1\41\1\44\1\50\1\62\1\60\1\51\1\56\1\45\1\61\1\13"+
    "\1\63\3\12\1\22\1\25\1\23\54\0\1\15\12\0\1\15\4\0"+
    "\1\15\5\0\27\15\1\0\37\15\1\0\u01ca\15\4\0\14\15\16\0"+
    "\5\15\7\0\1\15\1\0\1\15\126\0\1\15\52\0\5\15\1\0"+
    "\2\15\2\0\4\15\1\0\1\15\6\0\1\15\1\0\3\15\1\0"+
    "\1\15\1\0\24\15\1\0\123\15\1\0\213\15\10\0\246\15\1\0"+
    "\46\15\2\0\1\15\7\0\47\15\50\0\16\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\1\15\10\0\33\15\5\0\3\15\35\0"+
    "\13\15\5\0\70\15\1\0\7\15\16\0\146\15\1\0\10\15\4\0"+
    "\10\15\4\0\3\15\12\0\3\15\2\0\1\15\20\0\60\15\15\0"+
    "\145\15\30\0\41\15\11\0\2\15\4\0\1\15\5\0\30\15\2\0"+
    "\23\15\23\0\31\15\107\0\23\15\61\0\6\15\6\0\114\15\1\0"+
    "\20\15\1\0\3\15\4\0\17\15\15\0\23\15\1\0\10\15\2\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\3\0"+
    "\10\15\2\0\2\15\2\0\2\15\1\0\1\15\10\0\1\15\4\0"+
    "\2\15\1\0\5\15\14\0\2\15\17\0\3\15\1\0\6\15\4\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0\2\15\1\0"+
    "\2\15\4\0\5\15\4\0\2\15\2\0\2\15\4\0\1\15\7\0"+
    "\4\15\1\0\1\15\21\0\6\15\13\0\3\15\1\0\11\15\1\0"+
    "\3\15\1\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0"+
    "\11\15\1\0\3\15\1\0\2\15\3\0\1\15\17\0\4\15\35\0"+
    "\3\15\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\5\15\3\0\10\15\2\0\2\15\2\0\2\15\11\0"+
    "\2\15\4\0\2\15\1\0\5\15\15\0\1\15\20\0\2\15\1\0"+
    "\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15\1\0"+
    "\2\15\3\0\2\15\3\0\3\15\3\0\14\15\4\0\5\15\3\0"+
    "\3\15\1\0\3\15\3\0\1\15\6\0\1\15\50\0\4\15\1\0"+
    "\10\15\1\0\3\15\1\0\27\15\1\0\20\15\3\0\10\15\1\0"+
    "\3\15\1\0\3\15\10\0\2\15\1\0\2\15\6\0\4\15\35\0"+
    "\3\15\1\0\10\15\1\0\3\15\1\0\27\15\1\0\12\15\1\0"+
    "\5\15\3\0\10\15\1\0\3\15\1\0\3\15\10\0\2\15\7\0"+
    "\1\15\1\0\4\15\15\0\2\15\16\0\3\15\1\0\10\15\1\0"+
    "\3\15\1\0\51\15\2\0\10\15\1\0\3\15\1\0\3\15\1\0"+
    "\1\15\10\0\1\15\10\0\4\15\26\0\6\15\2\0\2\15\1\0"+
    "\22\15\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\10\0"+
    "\6\15\1\0\1\15\1\0\10\15\22\0\2\15\15\0\72\15\5\0"+
    "\7\15\6\0\1\15\63\0\2\15\1\0\1\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0"+
    "\1\15\1\0\1\15\2\0\2\15\1\0\15\15\1\0\3\15\2\0"+
    "\5\15\1\0\1\15\6\0\1\15\16\0\4\15\40\0\1\15\77\0"+
    "\10\15\1\0\44\15\4\0\21\15\6\0\20\15\1\0\44\15\103\0"+
    "\67\15\1\0\1\15\2\0\5\15\20\0\23\15\2\0\4\15\5\0"+
    "\31\15\7\0\1\15\15\0\2\15\2\0\46\15\1\0\1\15\5\0"+
    "\1\15\2\0\53\15\1\0\u014d\15\1\0\4\15\2\0\7\15\1\0"+
    "\1\15\1\0\4\15\2\0\51\15\1\0\4\15\2\0\41\15\1\0"+
    "\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\17\15\1\0"+
    "\71\15\1\0\4\15\2\0\103\15\4\0\1\15\40\0\20\15\20\0"+
    "\125\15\14\0\u026c\15\2\0\21\15\1\0\32\15\5\0\113\15\3\0"+
    "\13\15\7\0\15\15\1\0\6\15\14\0\24\15\14\0\24\15\14\0"+
    "\15\15\1\0\3\15\1\0\2\15\14\0\64\15\2\0\23\15\16\0"+
    "\1\15\4\0\1\15\103\0\130\15\10\0\53\15\5\0\106\15\12\0"+
    "\37\15\1\0\14\15\4\0\11\15\27\0\36\15\2\0\5\15\13\0"+
    "\54\15\4\0\32\15\66\0\34\15\4\0\77\15\2\0\24\15\62\0"+
    "\1\15\130\0\64\15\1\0\17\15\1\0\7\15\64\0\52\15\2\0"+
    "\4\15\12\0\54\15\1\0\13\15\16\0\66\15\27\0\3\15\12\0"+
    "\44\15\153\0\4\15\1\0\6\15\1\0\2\15\11\0\300\15\47\0"+
    "\16\15\13\0\u0116\15\2\0\6\15\2\0\46\15\2\0\6\15\2\0"+
    "\10\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\37\15\2\0"+
    "\65\15\1\0\7\15\1\0\1\15\3\0\3\15\1\0\7\15\3\0"+
    "\4\15\2\0\6\15\4\0\15\15\5\0\3\15\1\0\7\15\164\0"+
    "\1\15\15\0\1\15\20\0\15\15\145\0\1\15\4\0\1\15\2\0"+
    "\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0\5\15\4\0"+
    "\1\15\21\0\51\15\u032d\0\64\15\u0716\0\57\15\1\0\57\15\1\0"+
    "\205\15\6\0\4\15\3\0\2\15\14\0\46\15\1\0\1\15\5\0"+
    "\1\15\2\0\70\15\7\0\1\15\20\0\27\15\11\0\7\15\1\0"+
    "\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0"+
    "\7\15\1\0\7\15\1\0\40\15\57\0\1\15\u01d5\0\3\15\31\0"+
    "\11\15\7\0\5\15\2\0\5\15\4\0\126\15\6\0\3\15\1\0"+
    "\132\15\1\0\4\15\5\0\51\15\3\0\136\15\21\0\33\15\65\0"+
    "\20\15\u0200\0\u19b6\15\112\0\u51cd\15\63\0\u048d\15\103\0\56\15\2\0"+
    "\u010d\15\3\0\20\15\12\0\2\15\24\0\57\15\5\0\10\15\3\0"+
    "\37\15\1\0\121\15\47\0\11\15\2\0\147\15\2\0\4\15\1\0"+
    "\36\15\2\0\2\15\105\0\13\15\1\0\3\15\1\0\4\15\1\0"+
    "\34\15\30\0\64\15\14\0\104\15\56\0\6\15\3\0\1\15\16\0"+
    "\41\15\5\0\43\15\15\0\35\15\3\0\63\15\1\0\14\15\17\0"+
    "\1\15\20\0\5\15\1\0\12\15\12\0\5\15\1\0\67\15\11\0"+
    "\16\15\22\0\27\15\3\0\1\15\3\0\101\15\1\0\1\15\1\0"+
    "\1\15\30\0\3\15\2\0\20\15\2\0\4\15\13\0\6\15\2\0"+
    "\6\15\2\0\6\15\11\0\7\15\1\0\7\15\1\0\53\15\1\0"+
    "\4\15\4\0\2\15\132\0\53\15\25\0\u2ba4\15\14\0\27\15\4\0"+
    "\61\15\u2104\0\u016e\15\2\0\152\15\46\0\7\15\14\0\5\15\5\0"+
    "\14\15\1\0\15\15\1\0\5\15\1\0\1\15\1\0\2\15\1\0"+
    "\2\15\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0"+
    "\14\15\164\0\5\15\1\0\207\15\44\0\32\15\6\0\32\15\13\0"+
    "\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\43\0"+
    "\14\15\1\0\32\15\1\0\23\15\1\0\2\15\1\0\17\15\2\0"+
    "\16\15\42\0\173\15\105\0\65\15\u010b\0\35\15\3\0\61\15\57\0"+
    "\40\15\20\0\33\15\5\0\53\15\5\0\36\15\2\0\44\15\4\0"+
    "\10\15\1\0\5\15\52\0\236\15\142\0\50\15\10\0\64\15\234\0"+
    "\u0137\15\11\0\26\15\12\0\10\15\230\0\6\15\2\0\1\15\1\0"+
    "\54\15\1\0\2\15\3\0\1\15\2\0\27\15\12\0\27\15\11\0"+
    "\37\15\141\0\26\15\12\0\32\15\106\0\70\15\6\0\2\15\100\0"+
    "\4\15\1\0\2\15\5\0\10\15\1\0\3\15\1\0\33\15\54\0"+
    "\35\15\3\0\35\15\43\0\10\15\1\0\34\15\33\0\66\15\12\0"+
    "\26\15\12\0\23\15\15\0\22\15\156\0\111\15\u03b7\0\106\15\74\0"+
    "\67\15\27\0\31\15\27\0\63\15\35\0\43\15\3\0\1\15\11\0"+
    "\100\15\1\0\4\15\25\0\1\15\45\0\22\15\1\0\42\15\2\0"+
    "\1\15\170\0\71\15\30\0\3\15\1\0\10\15\2\0\2\15\2\0"+
    "\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0\10\15\2\0"+
    "\2\15\2\0\2\15\12\0\1\15\5\0\7\15\u011c\0\102\15\2\0"+
    "\2\15\1\0\1\15\270\0\66\15\2\0\7\15\101\0\77\15\1\0"+
    "\1\15\3\0\1\15\73\0\66\15\u01ea\0\100\15\37\0\1\15\u01c0\0"+
    "\71\15\u0507\0\u0399\15\147\0\157\15\u0b91\0\u042f\15\u33d1\0\u0239\15\7\0"+
    "\37\15\161\0\36\15\22\0\67\15\11\0\4\15\37\0\25\15\5\0"+
    "\23\15\u0370\0\105\15\13\0\57\15\24\0\15\15\u4060\0\2\15\u0bfe\0"+
    "\153\15\5\0\15\15\3\0\11\15\7\0\12\15\4\0\1\15\u1761\0"+
    "\125\15\1\0\107\15\1\0\2\15\2\0\1\15\2\0\2\15\2\0"+
    "\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\101\15\1\0"+
    "\4\15\2\0\10\15\1\0\7\15\1\0\34\15\1\0\4\15\1\0"+
    "\5\15\1\0\1\15\3\0\7\15\1\0\u0154\15\2\0\31\15\1\0"+
    "\31\15\1\0\37\15\1\0\31\15\1\0\37\15\1\0\31\15\1\0"+
    "\37\15\1\0\31\15\1\0\37\15\1\0\31\15\1\0\10\15\u1034\0"+
    "\305\15\u053b\0\4\15\1\0\33\15\1\0\2\15\1\0\1\15\2\0"+
    "\1\15\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0"+
    "\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0\3\15\1\0"+
    "\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\2\15\1\0\1\15\2\0\4\15\1\0"+
    "\7\15\1\0\4\15\1\0\4\15\1\0\1\15\1\0\12\15\1\0"+
    "\21\15\5\0\3\15\1\0\5\15\1\0\21\15\u0274\0\32\15\6\0"+
    "\32\15\6\0\32\15\u0e76\0\ua6d7\15\51\0\u1035\15\13\0\336\15\u3fe2\0"+
    "\u021e\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\2\1\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\17\7\3\0"+
    "\1\31\3\0\1\32\1\0\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\7\1\42\1\43\3\7\1\44"+
    "\4\7\1\45\5\7\1\46\4\7\1\0\1\31\1\0"+
    "\1\47\1\50\2\7\1\51\1\52\5\7\1\53\1\54"+
    "\5\7\1\55\3\7\1\0\1\56\1\7\1\57\1\60"+
    "\2\7\1\61\1\62\1\7\1\63\1\64\1\65\1\66"+
    "\2\7\1\67\1\70\1\71\2\7\1\72\1\73\1\74"+
    "\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\320\0\u0104\0\u0138"+
    "\0\64\0\320\0\320\0\u016c\0\u01a0\0\u01d4\0\64\0\64"+
    "\0\64\0\64\0\u0208\0\u023c\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\150\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u0138\0\64\0\u06e8\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\u071c\0\u0750"+
    "\0\u0784\0\320\0\u07b8\0\u07ec\0\u0820\0\320\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\320\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\320\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\64\0\u0b2c"+
    "\0\u06b4\0\64\0\u0b60\0\u0b94\0\320\0\320\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\320\0\320\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\320\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\320"+
    "\0\u0ea0\0\320\0\320\0\u0ed4\0\u0f08\0\320\0\320\0\u0f3c"+
    "\0\320\0\320\0\320\0\320\0\u0f70\0\u0fa4\0\u0e6c\0\320"+
    "\0\320\0\u0fd8\0\u100c\0\320\0\320\0\320\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\12\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\12\1\51\1\52\1\53\1\54\2\12"+
    "\1\55\1\56\64\0\1\57\1\3\62\57\3\0\1\60"+
    "\61\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\23\12\6\0\1\63\1\7\1\0\1\64\52\0"+
    "\10\65\1\66\53\65\5\0\1\67\4\0\2\67\1\0"+
    "\1\67\23\0\23\67\16\0\1\70\1\71\102\0\1\72"+
    "\51\0\1\73\64\0\1\74\55\0\1\75\63\0\1\76"+
    "\45\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\1\12\1\77\21\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\6\12\1\100\14\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\3\12\1\101\1\12\1\102\15\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\7\12"+
    "\1\103\2\12\1\104\1\12\1\105\6\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\2\12"+
    "\1\106\3\12\1\107\1\110\4\12\1\111\6\12\1\0"+
    "\2\61\2\0\3\12\2\0\2\12\2\0\1\62\22\0"+
    "\16\12\1\112\4\12\1\0\2\61\2\0\3\12\2\0"+
    "\2\12\2\0\1\62\22\0\14\12\1\113\6\12\1\0"+
    "\2\61\2\0\3\12\2\0\2\12\2\0\1\62\22\0"+
    "\1\12\1\114\14\12\1\115\4\12\1\0\2\61\2\0"+
    "\3\12\2\0\2\12\2\0\1\62\22\0\12\12\1\116"+
    "\10\12\1\0\2\61\2\0\3\12\2\0\2\12\2\0"+
    "\1\62\22\0\7\12\1\117\13\12\1\0\2\61\2\0"+
    "\3\12\2\0\2\12\2\0\1\62\22\0\2\12\1\120"+
    "\4\12\1\121\13\12\1\0\2\61\2\0\3\12\2\0"+
    "\2\12\2\0\1\62\22\0\16\12\1\122\4\12\1\0"+
    "\2\61\2\0\3\12\2\0\2\12\2\0\1\62\22\0"+
    "\6\12\1\123\14\12\1\0\2\61\2\0\3\12\2\0"+
    "\2\12\2\0\1\62\22\0\10\12\1\124\12\12\1\0"+
    "\2\61\2\0\3\12\2\0\2\12\2\0\1\62\22\0"+
    "\12\12\1\125\10\12\3\60\1\126\60\60\1\0\2\61"+
    "\10\0\1\61\2\0\1\62\63\0\2\127\53\0\1\130"+
    "\63\0\1\131\70\0\1\132\50\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\2\12\1\133\20\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\2\12\1\134\20\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\4\12\1\135\16\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\21\12\1\136\1\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\16\12\1\137\4\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\16\12\1\140\4\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\7\12\1\141\13\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\10\12\1\142\12\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\16\12\1\143\4\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\3\12\1\144\17\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\4\12\1\145\16\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\1\12\1\146\2\12\1\147\16\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\1\12"+
    "\1\150\21\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\7\12\1\151\13\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\11\12"+
    "\1\152\11\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\17\12\1\153\3\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\15\12"+
    "\1\154\5\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\2\12\1\155\20\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\2\12"+
    "\1\156\20\12\3\60\1\126\1\3\57\60\4\0\1\157"+
    "\2\0\1\130\55\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\3\12\1\160\17\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\1\12"+
    "\1\161\21\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\3\12\1\162\17\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\5\12"+
    "\1\163\15\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\1\12\1\164\21\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\1\12"+
    "\1\165\21\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\5\12\1\166\15\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\14\12"+
    "\1\167\6\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\20\12\1\170\2\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\10\12"+
    "\1\171\12\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\6\12\1\172\14\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\4\12"+
    "\1\173\16\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\16\12\1\174\4\12\1\0\2\61"+
    "\2\0\3\12\2\0\2\12\2\0\1\62\22\0\3\12"+
    "\1\175\17\12\1\0\2\61\2\0\3\12\2\0\2\12"+
    "\2\0\1\62\22\0\6\12\1\176\14\12\7\0\1\177"+
    "\55\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\15\12\1\200\5\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\4\12\1\201\16\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\6\12\1\202\14\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\10\12\1\203\12\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\4\12\1\204\16\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\16\12\1\205\4\12"+
    "\1\0\2\61\2\0\3\12\2\0\2\12\2\0\1\62"+
    "\22\0\6\12\1\206\14\12\1\0\2\61\2\0\3\12"+
    "\2\0\2\12\2\0\1\62\22\0\3\12\1\207\17\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\1\11\5\1\4\11\2\1\11\11"+
    "\21\1\3\0\1\1\3\0\1\11\1\0\7\11\27\1"+
    "\1\0\1\11\1\0\1\1\1\11\24\1\1\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2552) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.printf("FUCK\n");
          }
        case 62: break;
        case 2: 
          { 
          }
        case 63: break;
        case 3: 
          { System.out.printf("/ "); return symbol(sym.TK_DIVIDE);
          }
        case 64: break;
        case 4: 
          { System.out.printf(yytext() + " "); return symbol(sym.TK_BOOLEAN_CONSTANT, new Boolean("T".equals(yytext())));
          }
        case 65: break;
        case 5: 
          { System.out.printf(yytext() + " "); return symbol(sym.TK_INTEGER_CONSTANT, new Integer(yytext()));
          }
        case 66: break;
        case 6: 
          { System.out.printf(". "); return symbol(sym.TK_DOT);
          }
        case 67: break;
        case 7: 
          { System.out.printf(yytext() + " "); return symbol(sym.TK_IDENTIFIER, yytext());
          }
        case 68: break;
        case 8: 
          { System.out.printf(": "); return symbol(sym.TK_COLON);
          }
        case 69: break;
        case 9: 
          { System.out.printf("= "); return symbol(sym.TK_EQUALS);
          }
        case 70: break;
        case 10: 
          { System.out.printf("( "); return symbol(sym.TK_LPAREN);
          }
        case 71: break;
        case 11: 
          { System.out.printf(") "); return symbol(sym.TK_RPAREN);
          }
        case 72: break;
        case 12: 
          { System.out.printf("{ "); return symbol(sym.TK_LBRACE);
          }
        case 73: break;
        case 13: 
          { System.out.printf("} "); return symbol(sym.TK_RBRACE);
          }
        case 74: break;
        case 14: 
          { System.out.printf("[ "); return symbol(sym.TK_LBRACKET);
          }
        case 75: break;
        case 15: 
          { System.out.printf("] "); return symbol(sym.TK_RBRACKET);
          }
        case 76: break;
        case 16: 
          { System.out.printf("; "); return symbol(sym.TK_SEMI);
          }
        case 77: break;
        case 17: 
          { System.out.printf(", "); return symbol(sym.TK_COMMA);
          }
        case 78: break;
        case 18: 
          { System.out.printf("- "); return symbol(sym.TK_MINUS);
          }
        case 79: break;
        case 19: 
          { System.out.printf("+ "); return symbol(sym.TK_PLUS);
          }
        case 80: break;
        case 20: 
          { System.out.printf("* "); return symbol(sym.TK_TIMES);
          }
        case 81: break;
        case 21: 
          { System.out.printf("^ "); return symbol(sym.TK_POWER);
          }
        case 82: break;
        case 22: 
          { System.out.printf("> "); return symbol(sym.TK_LARGER);
          }
        case 83: break;
        case 23: 
          { System.out.printf("! "); return symbol(sym.TK_NOT);
          }
        case 84: break;
        case 24: 
          { System.out.printf("< "); return symbol(sym.TK_SMALLER);
          }
        case 85: break;
        case 25: 
          { String res = yytext();
      if (res.length() > 2)
      {
        if (res.substring(res.length() - 2).equals(":=") || res.substring(res.length() - 2).equals("::"))
        {
            String prefix = "";
            int idx = 0;
            while(res.charAt(idx) != ' ' && res.charAt(idx) != ':')
            {
                prefix += res.charAt(idx++);
            }
            yypushback(res.length() - idx);
            System.out.printf(prefix + " ");
            return symbol(sym.TK_IDENTIFIER, prefix);
        }
      }
      System.out.printf(yytext() + " ");
      return symbol(sym.TK_HALF_DECLARATION, yytext().substring(0, yytext().length() - 1));
          }
        case 86: break;
        case 26: 
          { String str = yytext();
      str = str.substring(1, str.length() - 1);
      System.out.printf(str + " ");
      return symbol(sym.TK_STRING_CONSTANT, str);
          }
        case 87: break;
        case 27: 
          { System.out.printf(". "); return symbol(sym.TK_COLON_COLON);
          }
        case 88: break;
        case 28: 
          { System.out.printf(":= "); return symbol(sym.TK_ASSIGNMENT);
          }
        case 89: break;
        case 29: 
          { System.out.printf("=> "); return symbol(sym.TK_IMPLICATION);
          }
        case 90: break;
        case 30: 
          { System.out.printf("&& "); return symbol(sym.TK_AND);
          }
        case 91: break;
        case 31: 
          { System.out.printf("|| "); return symbol(sym.TK_OR);
          }
        case 92: break;
        case 32: 
          { System.out.printf("!= "); return symbol(sym.TK_NOTEQUALS);
          }
        case 93: break;
        case 33: 
          { System.out.printf("<= "); return symbol(sym.TK_SEQUALS);
          }
        case 94: break;
        case 34: 
          { System.out.printf("in "); return symbol(sym.TK_IN);
          }
        case 95: break;
        case 35: 
          { System.out.printf("if "); return symbol(sym.TK_IF);
          }
        case 96: break;
        case 36: 
          { System.out.printf("fi "); return symbol(sym.TK_FI);
          }
        case 97: break;
        case 37: 
          { System.out.printf("od "); return symbol(sym.TK_OD);
          }
        case 98: break;
        case 38: 
          { System.out.printf("do "); return symbol(sym.TK_DO);
          }
        case 99: break;
        case 39: 
          { System.out.printf(yytext() + " "); return symbol(sym.TK_FLOAT_CONSTANT, new Float(yytext()));
          }
        case 100: break;
        case 40: 
          { System.out.printf(yytext() + " "); return symbol(sym.TK_CHAR_CONSTANT, yytext().substring(1, 2));
          }
        case 101: break;
        case 41: 
          { System.out.printf("int "); return symbol(sym.TK_INT);
          }
        case 102: break;
        case 42: 
          { System.out.printf("top "); return symbol(sym.TK_TOP);
          }
        case 103: break;
        case 43: 
          { System.out.printf("len "); return symbol(sym.TK_LEN);
          }
        case 104: break;
        case 44: 
          { System.out.printf("rat "); return symbol(sym.TK_RAT);
          }
        case 105: break;
        case 45: 
          { System.out.printf("seq "); return symbol(sym.TK_SEQUENCE);
          }
        case 106: break;
        case 46: 
          { System.out.printf("main "); return symbol(sym.TK_MAIN);
          }
        case 107: break;
        case 47: 
          { System.out.printf("then "); return symbol(sym.TK_THEN);
          }
        case 108: break;
        case 48: 
          { System.out.printf("tdef "); return symbol(sym.TK_TDEF);
          }
        case 109: break;
        case 49: 
          { System.out.printf("fdef "); return symbol(sym.TK_FDEF);
          }
        case 110: break;
        case 50: 
          { System.out.printf("read "); return symbol(sym.TK_READ);
          }
        case 111: break;
        case 51: 
          { System.out.printf("char "); return symbol(sym.TK_CHAR);
          }
        case 112: break;
        case 52: 
          { System.out.printf("bool "); return symbol(sym.TK_BOOL);
          }
        case 113: break;
        case 53: 
          { System.out.printf("dict "); return symbol(sym.TK_DICTIONARY);
          }
        case 114: break;
        case 54: 
          { System.out.printf("else "); return symbol(sym.TK_ELSE);
          }
        case 115: break;
        case 55: 
          { System.out.printf(yytext() + " "); return symbol(sym.TK_RATIONAL_CONSTANT, new String(yytext()));
          }
        case 116: break;
        case 56: 
          { System.out.printf("alias "); return symbol(sym.TK_ALIAS);
          }
        case 117: break;
        case 57: 
          { System.out.printf("float "); return symbol(sym.TK_FLOAT);
          }
        case 118: break;
        case 58: 
          { System.out.printf("print "); return symbol(sym.TK_PRINT);
          }
        case 119: break;
        case 59: 
          { System.out.printf("while "); return symbol(sym.TK_WHILE);
          }
        case 120: break;
        case 60: 
          { System.out.printf("forall "); return symbol(sym.TK_FORALL);
          }
        case 121: break;
        case 61: 
          { System.out.printf("return "); return symbol(sym.TK_RETURN);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
